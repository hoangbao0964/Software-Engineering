#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Project_BookCoffeeManagement.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Book_Coffee_DB")]
	public partial class LinqToSQLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAuthor(Author instance);
    partial void UpdateAuthor(Author instance);
    partial void DeleteAuthor(Author instance);
    partial void InsertWorkingWarehouseManager(WorkingWarehouseManager instance);
    partial void UpdateWorkingWarehouseManager(WorkingWarehouseManager instance);
    partial void DeleteWorkingWarehouseManager(WorkingWarehouseManager instance);
    partial void InsertBook(Book instance);
    partial void UpdateBook(Book instance);
    partial void DeleteBook(Book instance);
    partial void InsertBookBorrowOrder(BookBorrowOrder instance);
    partial void UpdateBookBorrowOrder(BookBorrowOrder instance);
    partial void DeleteBookBorrowOrder(BookBorrowOrder instance);
    partial void InsertBookCalled(BookCalled instance);
    partial void UpdateBookCalled(BookCalled instance);
    partial void DeleteBookCalled(BookCalled instance);
    partial void InsertBookDetail(BookDetail instance);
    partial void UpdateBookDetail(BookDetail instance);
    partial void DeleteBookDetail(BookDetail instance);
    partial void InsertBookReturned(BookReturned instance);
    partial void UpdateBookReturned(BookReturned instance);
    partial void DeleteBookReturned(BookReturned instance);
    partial void InsertBookReturnOrder(BookReturnOrder instance);
    partial void UpdateBookReturnOrder(BookReturnOrder instance);
    partial void DeleteBookReturnOrder(BookReturnOrder instance);
    partial void InsertBookStatus(BookStatus instance);
    partial void UpdateBookStatus(BookStatus instance);
    partial void DeleteBookStatus(BookStatus instance);
    partial void InsertBookWishlist(BookWishlist instance);
    partial void UpdateBookWishlist(BookWishlist instance);
    partial void DeleteBookWishlist(BookWishlist instance);
    partial void InsertDiscount(Discount instance);
    partial void UpdateDiscount(Discount instance);
    partial void DeleteDiscount(Discount instance);
    partial void InsertDiscountType1(DiscountType1 instance);
    partial void UpdateDiscountType1(DiscountType1 instance);
    partial void DeleteDiscountType1(DiscountType1 instance);
    partial void InsertDiscountType2(DiscountType2 instance);
    partial void UpdateDiscountType2(DiscountType2 instance);
    partial void DeleteDiscountType2(DiscountType2 instance);
    partial void InsertDiscountType3(DiscountType3 instance);
    partial void UpdateDiscountType3(DiscountType3 instance);
    partial void DeleteDiscountType3(DiscountType3 instance);
    partial void InsertFood(Food instance);
    partial void UpdateFood(Food instance);
    partial void DeleteFood(Food instance);
    partial void InsertFoodCalled(FoodCalled instance);
    partial void UpdateFoodCalled(FoodCalled instance);
    partial void DeleteFoodCalled(FoodCalled instance);
    partial void InsertFoodOrder(FoodOrder instance);
    partial void UpdateFoodOrder(FoodOrder instance);
    partial void DeleteFoodOrder(FoodOrder instance);
    partial void InsertFoodStatus(FoodStatus instance);
    partial void UpdateFoodStatus(FoodStatus instance);
    partial void DeleteFoodStatus(FoodStatus instance);
    partial void InsertGender(Gender instance);
    partial void UpdateGender(Gender instance);
    partial void DeleteGender(Gender instance);
    partial void InsertIngredient(Ingredient instance);
    partial void UpdateIngredient(Ingredient instance);
    partial void DeleteIngredient(Ingredient instance);
    partial void InsertIngredientDetail(IngredientDetail instance);
    partial void UpdateIngredientDetail(IngredientDetail instance);
    partial void DeleteIngredientDetail(IngredientDetail instance);
    partial void InsertIngredientInStockDetail(IngredientInStockDetail instance);
    partial void UpdateIngredientInStockDetail(IngredientInStockDetail instance);
    partial void DeleteIngredientInStockDetail(IngredientInStockDetail instance);
    partial void InsertIngredientsInFood(IngredientsInFood instance);
    partial void UpdateIngredientsInFood(IngredientsInFood instance);
    partial void DeleteIngredientsInFood(IngredientsInFood instance);
    partial void InsertOccupation(Occupation instance);
    partial void UpdateOccupation(Occupation instance);
    partial void DeleteOccupation(Occupation instance);
    partial void InsertOrderBasicInfo(OrderBasicInfo instance);
    partial void UpdateOrderBasicInfo(OrderBasicInfo instance);
    partial void DeleteOrderBasicInfo(OrderBasicInfo instance);
    partial void InsertOrderStatus(OrderStatus instance);
    partial void UpdateOrderStatus(OrderStatus instance);
    partial void DeleteOrderStatus(OrderStatus instance);
    partial void InsertParameter(Parameter instance);
    partial void UpdateParameter(Parameter instance);
    partial void DeleteParameter(Parameter instance);
    partial void InsertPersonalDetail(PersonalDetail instance);
    partial void UpdatePersonalDetail(PersonalDetail instance);
    partial void DeletePersonalDetail(PersonalDetail instance);
    partial void InsertProducer(Producer instance);
    partial void UpdateProducer(Producer instance);
    partial void DeleteProducer(Producer instance);
    partial void InsertPublisher(Publisher instance);
    partial void UpdatePublisher(Publisher instance);
    partial void DeletePublisher(Publisher instance);
    partial void InsertSchedule(Schedule instance);
    partial void UpdateSchedule(Schedule instance);
    partial void DeleteSchedule(Schedule instance);
    partial void InsertStaffAccount(StaffAccount instance);
    partial void UpdateStaffAccount(StaffAccount instance);
    partial void DeleteStaffAccount(StaffAccount instance);
    partial void InsertStaffDetail(StaffDetail instance);
    partial void UpdateStaffDetail(StaffDetail instance);
    partial void DeleteStaffDetail(StaffDetail instance);
    partial void InsertStaffPosition(StaffPosition instance);
    partial void UpdateStaffPosition(StaffPosition instance);
    partial void DeleteStaffPosition(StaffPosition instance);
    partial void InsertStaffStatus(StaffStatus instance);
    partial void UpdateStaffStatus(StaffStatus instance);
    partial void DeleteStaffStatus(StaffStatus instance);
    partial void InsertStockOrder(StockOrder instance);
    partial void UpdateStockOrder(StockOrder instance);
    partial void DeleteStockOrder(StockOrder instance);
    partial void InsertStockOrderDetail(StockOrderDetail instance);
    partial void UpdateStockOrderDetail(StockOrderDetail instance);
    partial void DeleteStockOrderDetail(StockOrderDetail instance);
    partial void InsertVIP(VIP instance);
    partial void UpdateVIP(VIP instance);
    partial void DeleteVIP(VIP instance);
    partial void InsertVIPOrder(VIPOrder instance);
    partial void UpdateVIPOrder(VIPOrder instance);
    partial void DeleteVIPOrder(VIPOrder instance);
    partial void InsertVIPStatus(VIPStatus instance);
    partial void UpdateVIPStatus(VIPStatus instance);
    partial void DeleteVIPStatus(VIPStatus instance);
    partial void InsertVoucher(Voucher instance);
    partial void UpdateVoucher(Voucher instance);
    partial void DeleteVoucher(Voucher instance);
    partial void InsertWorkingCashier(WorkingCashier instance);
    partial void UpdateWorkingCashier(WorkingCashier instance);
    partial void DeleteWorkingCashier(WorkingCashier instance);
    partial void InsertWorkingManager(WorkingManager instance);
    partial void UpdateWorkingManager(WorkingManager instance);
    partial void DeleteWorkingManager(WorkingManager instance);
    partial void InsertWorkingRegularStaff(WorkingRegularStaff instance);
    partial void UpdateWorkingRegularStaff(WorkingRegularStaff instance);
    partial void DeleteWorkingRegularStaff(WorkingRegularStaff instance);
    partial void InsertWorkingShiftInfo(WorkingShiftInfo instance);
    partial void UpdateWorkingShiftInfo(WorkingShiftInfo instance);
    partial void DeleteWorkingShiftInfo(WorkingShiftInfo instance);
    #endregion
		
		public LinqToSQLDataContext() : 
				base(global::Project_BookCoffeeManagement.Properties.Settings.Default.Book_Coffee_DBConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSQLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSQLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSQLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSQLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Author> Authors
		{
			get
			{
				return this.GetTable<Author>();
			}
		}
		
		public System.Data.Linq.Table<WorkingWarehouseManager> WorkingWarehouseManagers
		{
			get
			{
				return this.GetTable<WorkingWarehouseManager>();
			}
		}
		
		public System.Data.Linq.Table<Book> Books
		{
			get
			{
				return this.GetTable<Book>();
			}
		}
		
		public System.Data.Linq.Table<BookBorrowOrder> BookBorrowOrders
		{
			get
			{
				return this.GetTable<BookBorrowOrder>();
			}
		}
		
		public System.Data.Linq.Table<BookCalled> BookCalleds
		{
			get
			{
				return this.GetTable<BookCalled>();
			}
		}
		
		public System.Data.Linq.Table<BookDetail> BookDetails
		{
			get
			{
				return this.GetTable<BookDetail>();
			}
		}
		
		public System.Data.Linq.Table<BookReturned> BookReturneds
		{
			get
			{
				return this.GetTable<BookReturned>();
			}
		}
		
		public System.Data.Linq.Table<BookReturnOrder> BookReturnOrders
		{
			get
			{
				return this.GetTable<BookReturnOrder>();
			}
		}
		
		public System.Data.Linq.Table<BookStatus> BookStatus
		{
			get
			{
				return this.GetTable<BookStatus>();
			}
		}
		
		public System.Data.Linq.Table<BookWishlist> BookWishlists
		{
			get
			{
				return this.GetTable<BookWishlist>();
			}
		}
		
		public System.Data.Linq.Table<Discount> Discounts
		{
			get
			{
				return this.GetTable<Discount>();
			}
		}
		
		public System.Data.Linq.Table<DiscountType1> DiscountType1s
		{
			get
			{
				return this.GetTable<DiscountType1>();
			}
		}
		
		public System.Data.Linq.Table<DiscountType2> DiscountType2s
		{
			get
			{
				return this.GetTable<DiscountType2>();
			}
		}
		
		public System.Data.Linq.Table<DiscountType3> DiscountType3s
		{
			get
			{
				return this.GetTable<DiscountType3>();
			}
		}
		
		public System.Data.Linq.Table<Food> Foods
		{
			get
			{
				return this.GetTable<Food>();
			}
		}
		
		public System.Data.Linq.Table<FoodCalled> FoodCalleds
		{
			get
			{
				return this.GetTable<FoodCalled>();
			}
		}
		
		public System.Data.Linq.Table<FoodOrder> FoodOrders
		{
			get
			{
				return this.GetTable<FoodOrder>();
			}
		}
		
		public System.Data.Linq.Table<FoodStatus> FoodStatus
		{
			get
			{
				return this.GetTable<FoodStatus>();
			}
		}
		
		public System.Data.Linq.Table<Gender> Genders
		{
			get
			{
				return this.GetTable<Gender>();
			}
		}
		
		public System.Data.Linq.Table<Ingredient> Ingredients
		{
			get
			{
				return this.GetTable<Ingredient>();
			}
		}
		
		public System.Data.Linq.Table<IngredientDetail> IngredientDetails
		{
			get
			{
				return this.GetTable<IngredientDetail>();
			}
		}
		
		public System.Data.Linq.Table<IngredientInStockDetail> IngredientInStockDetails
		{
			get
			{
				return this.GetTable<IngredientInStockDetail>();
			}
		}
		
		public System.Data.Linq.Table<IngredientsInFood> IngredientsInFoods
		{
			get
			{
				return this.GetTable<IngredientsInFood>();
			}
		}
		
		public System.Data.Linq.Table<Occupation> Occupations
		{
			get
			{
				return this.GetTable<Occupation>();
			}
		}
		
		public System.Data.Linq.Table<OrderBasicInfo> OrderBasicInfos
		{
			get
			{
				return this.GetTable<OrderBasicInfo>();
			}
		}
		
		public System.Data.Linq.Table<OrderStatus> OrderStatus
		{
			get
			{
				return this.GetTable<OrderStatus>();
			}
		}
		
		public System.Data.Linq.Table<Parameter> Parameters
		{
			get
			{
				return this.GetTable<Parameter>();
			}
		}
		
		public System.Data.Linq.Table<PersonalDetail> PersonalDetails
		{
			get
			{
				return this.GetTable<PersonalDetail>();
			}
		}
		
		public System.Data.Linq.Table<Producer> Producers
		{
			get
			{
				return this.GetTable<Producer>();
			}
		}
		
		public System.Data.Linq.Table<Publisher> Publishers
		{
			get
			{
				return this.GetTable<Publisher>();
			}
		}
		
		public System.Data.Linq.Table<Schedule> Schedules
		{
			get
			{
				return this.GetTable<Schedule>();
			}
		}
		
		public System.Data.Linq.Table<StaffAccount> StaffAccounts
		{
			get
			{
				return this.GetTable<StaffAccount>();
			}
		}
		
		public System.Data.Linq.Table<StaffDetail> StaffDetails
		{
			get
			{
				return this.GetTable<StaffDetail>();
			}
		}
		
		public System.Data.Linq.Table<StaffPosition> StaffPositions
		{
			get
			{
				return this.GetTable<StaffPosition>();
			}
		}
		
		public System.Data.Linq.Table<StaffStatus> StaffStatus
		{
			get
			{
				return this.GetTable<StaffStatus>();
			}
		}
		
		public System.Data.Linq.Table<StockOrder> StockOrders
		{
			get
			{
				return this.GetTable<StockOrder>();
			}
		}
		
		public System.Data.Linq.Table<StockOrderDetail> StockOrderDetails
		{
			get
			{
				return this.GetTable<StockOrderDetail>();
			}
		}
		
		public System.Data.Linq.Table<VIP> VIPs
		{
			get
			{
				return this.GetTable<VIP>();
			}
		}
		
		public System.Data.Linq.Table<VIPOrder> VIPOrders
		{
			get
			{
				return this.GetTable<VIPOrder>();
			}
		}
		
		public System.Data.Linq.Table<VIPStatus> VIPStatus
		{
			get
			{
				return this.GetTable<VIPStatus>();
			}
		}
		
		public System.Data.Linq.Table<Voucher> Vouchers
		{
			get
			{
				return this.GetTable<Voucher>();
			}
		}
		
		public System.Data.Linq.Table<WorkingCashier> WorkingCashiers
		{
			get
			{
				return this.GetTable<WorkingCashier>();
			}
		}
		
		public System.Data.Linq.Table<WorkingManager> WorkingManagers
		{
			get
			{
				return this.GetTable<WorkingManager>();
			}
		}
		
		public System.Data.Linq.Table<WorkingRegularStaff> WorkingRegularStaffs
		{
			get
			{
				return this.GetTable<WorkingRegularStaff>();
			}
		}
		
		public System.Data.Linq.Table<WorkingShiftInfo> WorkingShiftInfos
		{
			get
			{
				return this.GetTable<WorkingShiftInfo>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Author")]
	public partial class Author : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _authorID;
		
		private string _name;
		
		private string _description;
		
		private EntitySet<BookDetail> _BookDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnauthorIDChanging(int value);
    partial void OnauthorIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public Author()
		{
			this._BookDetails = new EntitySet<BookDetail>(new Action<BookDetail>(this.attach_BookDetails), new Action<BookDetail>(this.detach_BookDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_authorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int authorID
		{
			get
			{
				return this._authorID;
			}
			set
			{
				if ((this._authorID != value))
				{
					this.OnauthorIDChanging(value);
					this.SendPropertyChanging();
					this._authorID = value;
					this.SendPropertyChanged("authorID");
					this.OnauthorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(300)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(1000)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Author_BookDetail", Storage="_BookDetails", ThisKey="authorID", OtherKey="authorID")]
		public EntitySet<BookDetail> BookDetails
		{
			get
			{
				return this._BookDetails;
			}
			set
			{
				this._BookDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookDetails(BookDetail entity)
		{
			this.SendPropertyChanging();
			entity.Author = this;
		}
		
		private void detach_BookDetails(BookDetail entity)
		{
			this.SendPropertyChanging();
			entity.Author = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkingWarehouseManager")]
	public partial class WorkingWarehouseManager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _staffID;
		
		private int _scheduleID;
		
		private EntityRef<Schedule> _Schedule;
		
		private EntityRef<StaffDetail> _StaffDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstaffIDChanging(string value);
    partial void OnstaffIDChanged();
    partial void OnscheduleIDChanging(int value);
    partial void OnscheduleIDChanged();
    #endregion
		
		public WorkingWarehouseManager()
		{
			this._Schedule = default(EntityRef<Schedule>);
			this._StaffDetail = default(EntityRef<StaffDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staffID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string staffID
		{
			get
			{
				return this._staffID;
			}
			set
			{
				if ((this._staffID != value))
				{
					if (this._StaffDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstaffIDChanging(value);
					this.SendPropertyChanging();
					this._staffID = value;
					this.SendPropertyChanged("staffID");
					this.OnstaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scheduleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int scheduleID
		{
			get
			{
				return this._scheduleID;
			}
			set
			{
				if ((this._scheduleID != value))
				{
					if (this._Schedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnscheduleIDChanging(value);
					this.SendPropertyChanging();
					this._scheduleID = value;
					this.SendPropertyChanged("scheduleID");
					this.OnscheduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_WorkingWarehouseManager", Storage="_Schedule", ThisKey="scheduleID", OtherKey="scheduleID", IsForeignKey=true)]
		public Schedule Schedule
		{
			get
			{
				return this._Schedule.Entity;
			}
			set
			{
				Schedule previousValue = this._Schedule.Entity;
				if (((previousValue != value) 
							|| (this._Schedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schedule.Entity = null;
						previousValue.WorkingWarehouseManagers.Remove(this);
					}
					this._Schedule.Entity = value;
					if ((value != null))
					{
						value.WorkingWarehouseManagers.Add(this);
						this._scheduleID = value.scheduleID;
					}
					else
					{
						this._scheduleID = default(int);
					}
					this.SendPropertyChanged("Schedule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffDetail_WorkingWarehouseManager", Storage="_StaffDetail", ThisKey="staffID", OtherKey="staffID", IsForeignKey=true)]
		public StaffDetail StaffDetail
		{
			get
			{
				return this._StaffDetail.Entity;
			}
			set
			{
				StaffDetail previousValue = this._StaffDetail.Entity;
				if (((previousValue != value) 
							|| (this._StaffDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffDetail.Entity = null;
						previousValue.WorkingWarehouseManagers.Remove(this);
					}
					this._StaffDetail.Entity = value;
					if ((value != null))
					{
						value.WorkingWarehouseManagers.Add(this);
						this._staffID = value.staffID;
					}
					else
					{
						this._staffID = default(string);
					}
					this.SendPropertyChanged("StaffDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Book")]
	public partial class Book : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _bookID;
		
		private int _bookDetailsID;
		
		private string _location;
		
		private int _bookStatusCode;
		
		private EntitySet<BookCalled> _BookCalleds;
		
		private EntitySet<BookReturned> _BookReturneds;
		
		private EntityRef<BookDetail> _BookDetail;
		
		private EntityRef<BookStatus> _BookStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnbookIDChanging(string value);
    partial void OnbookIDChanged();
    partial void OnbookDetailsIDChanging(int value);
    partial void OnbookDetailsIDChanged();
    partial void OnlocationChanging(string value);
    partial void OnlocationChanged();
    partial void OnbookStatusCodeChanging(int value);
    partial void OnbookStatusCodeChanged();
    #endregion
		
		public Book()
		{
			this._BookCalleds = new EntitySet<BookCalled>(new Action<BookCalled>(this.attach_BookCalleds), new Action<BookCalled>(this.detach_BookCalleds));
			this._BookReturneds = new EntitySet<BookReturned>(new Action<BookReturned>(this.attach_BookReturneds), new Action<BookReturned>(this.detach_BookReturneds));
			this._BookDetail = default(EntityRef<BookDetail>);
			this._BookStatus = default(EntityRef<BookStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bookID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string bookID
		{
			get
			{
				return this._bookID;
			}
			set
			{
				if ((this._bookID != value))
				{
					this.OnbookIDChanging(value);
					this.SendPropertyChanging();
					this._bookID = value;
					this.SendPropertyChanged("bookID");
					this.OnbookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bookDetailsID", DbType="Int NOT NULL")]
		public int bookDetailsID
		{
			get
			{
				return this._bookDetailsID;
			}
			set
			{
				if ((this._bookDetailsID != value))
				{
					if (this._BookDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbookDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._bookDetailsID = value;
					this.SendPropertyChanged("bookDetailsID");
					this.OnbookDetailsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_location", DbType="NVarChar(100)")]
		public string location
		{
			get
			{
				return this._location;
			}
			set
			{
				if ((this._location != value))
				{
					this.OnlocationChanging(value);
					this.SendPropertyChanging();
					this._location = value;
					this.SendPropertyChanged("location");
					this.OnlocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bookStatusCode", DbType="Int NOT NULL")]
		public int bookStatusCode
		{
			get
			{
				return this._bookStatusCode;
			}
			set
			{
				if ((this._bookStatusCode != value))
				{
					if (this._BookStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbookStatusCodeChanging(value);
					this.SendPropertyChanging();
					this._bookStatusCode = value;
					this.SendPropertyChanged("bookStatusCode");
					this.OnbookStatusCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_BookCalled", Storage="_BookCalleds", ThisKey="bookID", OtherKey="bookID")]
		public EntitySet<BookCalled> BookCalleds
		{
			get
			{
				return this._BookCalleds;
			}
			set
			{
				this._BookCalleds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_BookReturned", Storage="_BookReturneds", ThisKey="bookID", OtherKey="bookID")]
		public EntitySet<BookReturned> BookReturneds
		{
			get
			{
				return this._BookReturneds;
			}
			set
			{
				this._BookReturneds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BookDetail_Book", Storage="_BookDetail", ThisKey="bookDetailsID", OtherKey="bookDetailsID", IsForeignKey=true)]
		public BookDetail BookDetail
		{
			get
			{
				return this._BookDetail.Entity;
			}
			set
			{
				BookDetail previousValue = this._BookDetail.Entity;
				if (((previousValue != value) 
							|| (this._BookDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BookDetail.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._BookDetail.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._bookDetailsID = value.bookDetailsID;
					}
					else
					{
						this._bookDetailsID = default(int);
					}
					this.SendPropertyChanged("BookDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BookStatus_Book", Storage="_BookStatus", ThisKey="bookStatusCode", OtherKey="bookStatusCode", IsForeignKey=true)]
		public BookStatus BookStatus
		{
			get
			{
				return this._BookStatus.Entity;
			}
			set
			{
				BookStatus previousValue = this._BookStatus.Entity;
				if (((previousValue != value) 
							|| (this._BookStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BookStatus.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._BookStatus.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._bookStatusCode = value.bookStatusCode;
					}
					else
					{
						this._bookStatusCode = default(int);
					}
					this.SendPropertyChanged("BookStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookCalleds(BookCalled entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_BookCalleds(BookCalled entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
		
		private void attach_BookReturneds(BookReturned entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_BookReturneds(BookReturned entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookBorrowOrder")]
	public partial class BookBorrowOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _orderID;
		
		private EntitySet<BookCalled> _BookCalleds;
		
		private EntitySet<BookReturnOrder> _BookReturnOrders;
		
		private EntityRef<OrderBasicInfo> _OrderBasicInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnorderIDChanging(string value);
    partial void OnorderIDChanged();
    #endregion
		
		public BookBorrowOrder()
		{
			this._BookCalleds = new EntitySet<BookCalled>(new Action<BookCalled>(this.attach_BookCalleds), new Action<BookCalled>(this.detach_BookCalleds));
			this._BookReturnOrders = new EntitySet<BookReturnOrder>(new Action<BookReturnOrder>(this.attach_BookReturnOrders), new Action<BookReturnOrder>(this.detach_BookReturnOrders));
			this._OrderBasicInfo = default(EntityRef<OrderBasicInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string orderID
		{
			get
			{
				return this._orderID;
			}
			set
			{
				if ((this._orderID != value))
				{
					if (this._OrderBasicInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnorderIDChanging(value);
					this.SendPropertyChanging();
					this._orderID = value;
					this.SendPropertyChanged("orderID");
					this.OnorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BookBorrowOrder_BookCalled", Storage="_BookCalleds", ThisKey="orderID", OtherKey="orderID")]
		public EntitySet<BookCalled> BookCalleds
		{
			get
			{
				return this._BookCalleds;
			}
			set
			{
				this._BookCalleds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BookBorrowOrder_BookReturnOrder", Storage="_BookReturnOrders", ThisKey="orderID", OtherKey="bookBorrowOrderID")]
		public EntitySet<BookReturnOrder> BookReturnOrders
		{
			get
			{
				return this._BookReturnOrders;
			}
			set
			{
				this._BookReturnOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderBasicInfo_BookBorrowOrder", Storage="_OrderBasicInfo", ThisKey="orderID", OtherKey="orderID", IsForeignKey=true)]
		public OrderBasicInfo OrderBasicInfo
		{
			get
			{
				return this._OrderBasicInfo.Entity;
			}
			set
			{
				OrderBasicInfo previousValue = this._OrderBasicInfo.Entity;
				if (((previousValue != value) 
							|| (this._OrderBasicInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderBasicInfo.Entity = null;
						previousValue.BookBorrowOrder = null;
					}
					this._OrderBasicInfo.Entity = value;
					if ((value != null))
					{
						value.BookBorrowOrder = this;
						this._orderID = value.orderID;
					}
					else
					{
						this._orderID = default(string);
					}
					this.SendPropertyChanged("OrderBasicInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookCalleds(BookCalled entity)
		{
			this.SendPropertyChanging();
			entity.BookBorrowOrder = this;
		}
		
		private void detach_BookCalleds(BookCalled entity)
		{
			this.SendPropertyChanging();
			entity.BookBorrowOrder = null;
		}
		
		private void attach_BookReturnOrders(BookReturnOrder entity)
		{
			this.SendPropertyChanging();
			entity.BookBorrowOrder = this;
		}
		
		private void detach_BookReturnOrders(BookReturnOrder entity)
		{
			this.SendPropertyChanging();
			entity.BookBorrowOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookCalled")]
	public partial class BookCalled : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _orderID;
		
		private string _bookID;
		
		private EntityRef<Book> _Book;
		
		private EntityRef<BookBorrowOrder> _BookBorrowOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnorderIDChanging(string value);
    partial void OnorderIDChanged();
    partial void OnbookIDChanging(string value);
    partial void OnbookIDChanged();
    #endregion
		
		public BookCalled()
		{
			this._Book = default(EntityRef<Book>);
			this._BookBorrowOrder = default(EntityRef<BookBorrowOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string orderID
		{
			get
			{
				return this._orderID;
			}
			set
			{
				if ((this._orderID != value))
				{
					if (this._BookBorrowOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnorderIDChanging(value);
					this.SendPropertyChanging();
					this._orderID = value;
					this.SendPropertyChanged("orderID");
					this.OnorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bookID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string bookID
		{
			get
			{
				return this._bookID;
			}
			set
			{
				if ((this._bookID != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbookIDChanging(value);
					this.SendPropertyChanging();
					this._bookID = value;
					this.SendPropertyChanged("bookID");
					this.OnbookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_BookCalled", Storage="_Book", ThisKey="bookID", OtherKey="bookID", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.BookCalleds.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.BookCalleds.Add(this);
						this._bookID = value.bookID;
					}
					else
					{
						this._bookID = default(string);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BookBorrowOrder_BookCalled", Storage="_BookBorrowOrder", ThisKey="orderID", OtherKey="orderID", IsForeignKey=true)]
		public BookBorrowOrder BookBorrowOrder
		{
			get
			{
				return this._BookBorrowOrder.Entity;
			}
			set
			{
				BookBorrowOrder previousValue = this._BookBorrowOrder.Entity;
				if (((previousValue != value) 
							|| (this._BookBorrowOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BookBorrowOrder.Entity = null;
						previousValue.BookCalleds.Remove(this);
					}
					this._BookBorrowOrder.Entity = value;
					if ((value != null))
					{
						value.BookCalleds.Add(this);
						this._orderID = value.orderID;
					}
					else
					{
						this._orderID = default(string);
					}
					this.SendPropertyChanged("BookBorrowOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookDetails")]
	public partial class BookDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _bookDetailsID;
		
		private string _name;
		
		private System.Nullable<double> _price;
		
		private System.Nullable<System.DateTime> _publishDate;
		
		private int _publisherID;
		
		private int _authorID;
		
		private EntitySet<Book> _Books;
		
		private EntityRef<BookWishlist> _BookWishlist;
		
		private EntityRef<Author> _Author;
		
		private EntityRef<Publisher> _Publisher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnbookDetailsIDChanging(int value);
    partial void OnbookDetailsIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpriceChanging(System.Nullable<double> value);
    partial void OnpriceChanged();
    partial void OnpublishDateChanging(System.Nullable<System.DateTime> value);
    partial void OnpublishDateChanged();
    partial void OnpublisherIDChanging(int value);
    partial void OnpublisherIDChanged();
    partial void OnauthorIDChanging(int value);
    partial void OnauthorIDChanged();
    #endregion
		
		public BookDetail()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			this._BookWishlist = default(EntityRef<BookWishlist>);
			this._Author = default(EntityRef<Author>);
			this._Publisher = default(EntityRef<Publisher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bookDetailsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int bookDetailsID
		{
			get
			{
				return this._bookDetailsID;
			}
			set
			{
				if ((this._bookDetailsID != value))
				{
					this.OnbookDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._bookDetailsID = value;
					this.SendPropertyChanged("bookDetailsID");
					this.OnbookDetailsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(300)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float")]
		public System.Nullable<double> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publishDate", DbType="Date")]
		public System.Nullable<System.DateTime> publishDate
		{
			get
			{
				return this._publishDate;
			}
			set
			{
				if ((this._publishDate != value))
				{
					this.OnpublishDateChanging(value);
					this.SendPropertyChanging();
					this._publishDate = value;
					this.SendPropertyChanged("publishDate");
					this.OnpublishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publisherID", DbType="Int NOT NULL")]
		public int publisherID
		{
			get
			{
				return this._publisherID;
			}
			set
			{
				if ((this._publisherID != value))
				{
					if (this._Publisher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpublisherIDChanging(value);
					this.SendPropertyChanging();
					this._publisherID = value;
					this.SendPropertyChanged("publisherID");
					this.OnpublisherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_authorID", DbType="Int NOT NULL")]
		public int authorID
		{
			get
			{
				return this._authorID;
			}
			set
			{
				if ((this._authorID != value))
				{
					if (this._Author.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnauthorIDChanging(value);
					this.SendPropertyChanging();
					this._authorID = value;
					this.SendPropertyChanged("authorID");
					this.OnauthorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BookDetail_Book", Storage="_Books", ThisKey="bookDetailsID", OtherKey="bookDetailsID")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BookDetail_BookWishlist", Storage="_BookWishlist", ThisKey="bookDetailsID", OtherKey="recommendBookDetailsID", IsUnique=true, IsForeignKey=false)]
		public BookWishlist BookWishlist
		{
			get
			{
				return this._BookWishlist.Entity;
			}
			set
			{
				BookWishlist previousValue = this._BookWishlist.Entity;
				if (((previousValue != value) 
							|| (this._BookWishlist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BookWishlist.Entity = null;
						previousValue.BookDetail = null;
					}
					this._BookWishlist.Entity = value;
					if ((value != null))
					{
						value.BookDetail = this;
					}
					this.SendPropertyChanged("BookWishlist");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Author_BookDetail", Storage="_Author", ThisKey="authorID", OtherKey="authorID", IsForeignKey=true)]
		public Author Author
		{
			get
			{
				return this._Author.Entity;
			}
			set
			{
				Author previousValue = this._Author.Entity;
				if (((previousValue != value) 
							|| (this._Author.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Author.Entity = null;
						previousValue.BookDetails.Remove(this);
					}
					this._Author.Entity = value;
					if ((value != null))
					{
						value.BookDetails.Add(this);
						this._authorID = value.authorID;
					}
					else
					{
						this._authorID = default(int);
					}
					this.SendPropertyChanged("Author");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publisher_BookDetail", Storage="_Publisher", ThisKey="publisherID", OtherKey="publisherID", IsForeignKey=true)]
		public Publisher Publisher
		{
			get
			{
				return this._Publisher.Entity;
			}
			set
			{
				Publisher previousValue = this._Publisher.Entity;
				if (((previousValue != value) 
							|| (this._Publisher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publisher.Entity = null;
						previousValue.BookDetails.Remove(this);
					}
					this._Publisher.Entity = value;
					if ((value != null))
					{
						value.BookDetails.Add(this);
						this._publisherID = value.publisherID;
					}
					else
					{
						this._publisherID = default(int);
					}
					this.SendPropertyChanged("Publisher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.BookDetail = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.BookDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookReturned")]
	public partial class BookReturned : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _orderID;
		
		private string _bookID;
		
		private EntityRef<Book> _Book;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnorderIDChanging(string value);
    partial void OnorderIDChanged();
    partial void OnbookIDChanging(string value);
    partial void OnbookIDChanged();
    #endregion
		
		public BookReturned()
		{
			this._Book = default(EntityRef<Book>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string orderID
		{
			get
			{
				return this._orderID;
			}
			set
			{
				if ((this._orderID != value))
				{
					this.OnorderIDChanging(value);
					this.SendPropertyChanging();
					this._orderID = value;
					this.SendPropertyChanged("orderID");
					this.OnorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bookID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string bookID
		{
			get
			{
				return this._bookID;
			}
			set
			{
				if ((this._bookID != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbookIDChanging(value);
					this.SendPropertyChanging();
					this._bookID = value;
					this.SendPropertyChanged("bookID");
					this.OnbookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_BookReturned", Storage="_Book", ThisKey="bookID", OtherKey="bookID", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.BookReturneds.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.BookReturneds.Add(this);
						this._bookID = value.bookID;
					}
					else
					{
						this._bookID = default(string);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookReturnOrder")]
	public partial class BookReturnOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _orderID;
		
		private string _bookBorrowOrderID;
		
		private System.Nullable<int> _lateDays;
		
		private EntityRef<BookBorrowOrder> _BookBorrowOrder;
		
		private EntityRef<OrderBasicInfo> _OrderBasicInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnorderIDChanging(string value);
    partial void OnorderIDChanged();
    partial void OnbookBorrowOrderIDChanging(string value);
    partial void OnbookBorrowOrderIDChanged();
    partial void OnlateDaysChanging(System.Nullable<int> value);
    partial void OnlateDaysChanged();
    #endregion
		
		public BookReturnOrder()
		{
			this._BookBorrowOrder = default(EntityRef<BookBorrowOrder>);
			this._OrderBasicInfo = default(EntityRef<OrderBasicInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string orderID
		{
			get
			{
				return this._orderID;
			}
			set
			{
				if ((this._orderID != value))
				{
					if (this._OrderBasicInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnorderIDChanging(value);
					this.SendPropertyChanging();
					this._orderID = value;
					this.SendPropertyChanged("orderID");
					this.OnorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bookBorrowOrderID", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string bookBorrowOrderID
		{
			get
			{
				return this._bookBorrowOrderID;
			}
			set
			{
				if ((this._bookBorrowOrderID != value))
				{
					if (this._BookBorrowOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbookBorrowOrderIDChanging(value);
					this.SendPropertyChanging();
					this._bookBorrowOrderID = value;
					this.SendPropertyChanged("bookBorrowOrderID");
					this.OnbookBorrowOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lateDays", DbType="Int")]
		public System.Nullable<int> lateDays
		{
			get
			{
				return this._lateDays;
			}
			set
			{
				if ((this._lateDays != value))
				{
					this.OnlateDaysChanging(value);
					this.SendPropertyChanging();
					this._lateDays = value;
					this.SendPropertyChanged("lateDays");
					this.OnlateDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BookBorrowOrder_BookReturnOrder", Storage="_BookBorrowOrder", ThisKey="bookBorrowOrderID", OtherKey="orderID", IsForeignKey=true)]
		public BookBorrowOrder BookBorrowOrder
		{
			get
			{
				return this._BookBorrowOrder.Entity;
			}
			set
			{
				BookBorrowOrder previousValue = this._BookBorrowOrder.Entity;
				if (((previousValue != value) 
							|| (this._BookBorrowOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BookBorrowOrder.Entity = null;
						previousValue.BookReturnOrders.Remove(this);
					}
					this._BookBorrowOrder.Entity = value;
					if ((value != null))
					{
						value.BookReturnOrders.Add(this);
						this._bookBorrowOrderID = value.orderID;
					}
					else
					{
						this._bookBorrowOrderID = default(string);
					}
					this.SendPropertyChanged("BookBorrowOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderBasicInfo_BookReturnOrder", Storage="_OrderBasicInfo", ThisKey="orderID", OtherKey="orderID", IsForeignKey=true)]
		public OrderBasicInfo OrderBasicInfo
		{
			get
			{
				return this._OrderBasicInfo.Entity;
			}
			set
			{
				OrderBasicInfo previousValue = this._OrderBasicInfo.Entity;
				if (((previousValue != value) 
							|| (this._OrderBasicInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderBasicInfo.Entity = null;
						previousValue.BookReturnOrder = null;
					}
					this._OrderBasicInfo.Entity = value;
					if ((value != null))
					{
						value.BookReturnOrder = this;
						this._orderID = value.orderID;
					}
					else
					{
						this._orderID = default(string);
					}
					this.SendPropertyChanged("OrderBasicInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookStatus")]
	public partial class BookStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _bookStatusCode;
		
		private string _name;
		
		private EntitySet<Book> _Books;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnbookStatusCodeChanging(int value);
    partial void OnbookStatusCodeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public BookStatus()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bookStatusCode", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int bookStatusCode
		{
			get
			{
				return this._bookStatusCode;
			}
			set
			{
				if ((this._bookStatusCode != value))
				{
					this.OnbookStatusCodeChanging(value);
					this.SendPropertyChanging();
					this._bookStatusCode = value;
					this.SendPropertyChanged("bookStatusCode");
					this.OnbookStatusCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(300)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BookStatus_Book", Storage="_Books", ThisKey="bookStatusCode", OtherKey="bookStatusCode")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.BookStatus = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.BookStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookWishlist")]
	public partial class BookWishlist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _recommendBookDetailsID;
		
		private EntityRef<BookDetail> _BookDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnrecommendBookDetailsIDChanging(int value);
    partial void OnrecommendBookDetailsIDChanged();
    #endregion
		
		public BookWishlist()
		{
			this._BookDetail = default(EntityRef<BookDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_recommendBookDetailsID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int recommendBookDetailsID
		{
			get
			{
				return this._recommendBookDetailsID;
			}
			set
			{
				if ((this._recommendBookDetailsID != value))
				{
					if (this._BookDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrecommendBookDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._recommendBookDetailsID = value;
					this.SendPropertyChanged("recommendBookDetailsID");
					this.OnrecommendBookDetailsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BookDetail_BookWishlist", Storage="_BookDetail", ThisKey="recommendBookDetailsID", OtherKey="bookDetailsID", IsForeignKey=true)]
		public BookDetail BookDetail
		{
			get
			{
				return this._BookDetail.Entity;
			}
			set
			{
				BookDetail previousValue = this._BookDetail.Entity;
				if (((previousValue != value) 
							|| (this._BookDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BookDetail.Entity = null;
						previousValue.BookWishlist = null;
					}
					this._BookDetail.Entity = value;
					if ((value != null))
					{
						value.BookWishlist = this;
						this._recommendBookDetailsID = value.bookDetailsID;
					}
					else
					{
						this._recommendBookDetailsID = default(int);
					}
					this.SendPropertyChanged("BookDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Discount")]
	public partial class Discount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _discountID;
		
		private System.Nullable<int> _type;
		
		private EntityRef<DiscountType1> _DiscountType1;
		
		private EntityRef<DiscountType2> _DiscountType2;
		
		private EntityRef<DiscountType3> _DiscountType3;
		
		private EntitySet<Voucher> _Vouchers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndiscountIDChanging(string value);
    partial void OndiscountIDChanged();
    partial void OntypeChanging(System.Nullable<int> value);
    partial void OntypeChanged();
    #endregion
		
		public Discount()
		{
			this._DiscountType1 = default(EntityRef<DiscountType1>);
			this._DiscountType2 = default(EntityRef<DiscountType2>);
			this._DiscountType3 = default(EntityRef<DiscountType3>);
			this._Vouchers = new EntitySet<Voucher>(new Action<Voucher>(this.attach_Vouchers), new Action<Voucher>(this.detach_Vouchers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_discountID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string discountID
		{
			get
			{
				return this._discountID;
			}
			set
			{
				if ((this._discountID != value))
				{
					this.OndiscountIDChanging(value);
					this.SendPropertyChanging();
					this._discountID = value;
					this.SendPropertyChanged("discountID");
					this.OndiscountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="Int")]
		public System.Nullable<int> type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discount_DiscountType1", Storage="_DiscountType1", ThisKey="discountID", OtherKey="discountID", IsUnique=true, IsForeignKey=false)]
		public DiscountType1 DiscountType1
		{
			get
			{
				return this._DiscountType1.Entity;
			}
			set
			{
				DiscountType1 previousValue = this._DiscountType1.Entity;
				if (((previousValue != value) 
							|| (this._DiscountType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DiscountType1.Entity = null;
						previousValue.Discount = null;
					}
					this._DiscountType1.Entity = value;
					if ((value != null))
					{
						value.Discount = this;
					}
					this.SendPropertyChanged("DiscountType1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discount_DiscountType2", Storage="_DiscountType2", ThisKey="discountID", OtherKey="discountID", IsUnique=true, IsForeignKey=false)]
		public DiscountType2 DiscountType2
		{
			get
			{
				return this._DiscountType2.Entity;
			}
			set
			{
				DiscountType2 previousValue = this._DiscountType2.Entity;
				if (((previousValue != value) 
							|| (this._DiscountType2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DiscountType2.Entity = null;
						previousValue.Discount = null;
					}
					this._DiscountType2.Entity = value;
					if ((value != null))
					{
						value.Discount = this;
					}
					this.SendPropertyChanged("DiscountType2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discount_DiscountType3", Storage="_DiscountType3", ThisKey="discountID", OtherKey="discountID", IsUnique=true, IsForeignKey=false)]
		public DiscountType3 DiscountType3
		{
			get
			{
				return this._DiscountType3.Entity;
			}
			set
			{
				DiscountType3 previousValue = this._DiscountType3.Entity;
				if (((previousValue != value) 
							|| (this._DiscountType3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DiscountType3.Entity = null;
						previousValue.Discount = null;
					}
					this._DiscountType3.Entity = value;
					if ((value != null))
					{
						value.Discount = this;
					}
					this.SendPropertyChanged("DiscountType3");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discount_Voucher", Storage="_Vouchers", ThisKey="discountID", OtherKey="discountID")]
		public EntitySet<Voucher> Vouchers
		{
			get
			{
				return this._Vouchers;
			}
			set
			{
				this._Vouchers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Vouchers(Voucher entity)
		{
			this.SendPropertyChanging();
			entity.Discount = this;
		}
		
		private void detach_Vouchers(Voucher entity)
		{
			this.SendPropertyChanging();
			entity.Discount = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DiscountType1")]
	public partial class DiscountType1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _discountID;
		
		private string _description;
		
		private System.Nullable<double> _discountRate;
		
		private EntityRef<Discount> _Discount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndiscountIDChanging(string value);
    partial void OndiscountIDChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OndiscountRateChanging(System.Nullable<double> value);
    partial void OndiscountRateChanged();
    #endregion
		
		public DiscountType1()
		{
			this._Discount = default(EntityRef<Discount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_discountID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string discountID
		{
			get
			{
				return this._discountID;
			}
			set
			{
				if ((this._discountID != value))
				{
					if (this._Discount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndiscountIDChanging(value);
					this.SendPropertyChanging();
					this._discountID = value;
					this.SendPropertyChanged("discountID");
					this.OndiscountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(300)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_discountRate", DbType="Float")]
		public System.Nullable<double> discountRate
		{
			get
			{
				return this._discountRate;
			}
			set
			{
				if ((this._discountRate != value))
				{
					this.OndiscountRateChanging(value);
					this.SendPropertyChanging();
					this._discountRate = value;
					this.SendPropertyChanged("discountRate");
					this.OndiscountRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discount_DiscountType1", Storage="_Discount", ThisKey="discountID", OtherKey="discountID", IsForeignKey=true)]
		public Discount Discount
		{
			get
			{
				return this._Discount.Entity;
			}
			set
			{
				Discount previousValue = this._Discount.Entity;
				if (((previousValue != value) 
							|| (this._Discount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Discount.Entity = null;
						previousValue.DiscountType1 = null;
					}
					this._Discount.Entity = value;
					if ((value != null))
					{
						value.DiscountType1 = this;
						this._discountID = value.discountID;
					}
					else
					{
						this._discountID = default(string);
					}
					this.SendPropertyChanged("Discount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DiscountType2")]
	public partial class DiscountType2 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _discountID;
		
		private string _description;
		
		private System.Nullable<int> _buyFoodID;
		
		private System.Nullable<int> _freeFoodID;
		
		private EntityRef<Discount> _Discount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndiscountIDChanging(string value);
    partial void OndiscountIDChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnbuyFoodIDChanging(System.Nullable<int> value);
    partial void OnbuyFoodIDChanged();
    partial void OnfreeFoodIDChanging(System.Nullable<int> value);
    partial void OnfreeFoodIDChanged();
    #endregion
		
		public DiscountType2()
		{
			this._Discount = default(EntityRef<Discount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_discountID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string discountID
		{
			get
			{
				return this._discountID;
			}
			set
			{
				if ((this._discountID != value))
				{
					if (this._Discount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndiscountIDChanging(value);
					this.SendPropertyChanging();
					this._discountID = value;
					this.SendPropertyChanged("discountID");
					this.OndiscountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(300)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_buyFoodID", DbType="Int")]
		public System.Nullable<int> buyFoodID
		{
			get
			{
				return this._buyFoodID;
			}
			set
			{
				if ((this._buyFoodID != value))
				{
					this.OnbuyFoodIDChanging(value);
					this.SendPropertyChanging();
					this._buyFoodID = value;
					this.SendPropertyChanged("buyFoodID");
					this.OnbuyFoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_freeFoodID", DbType="Int")]
		public System.Nullable<int> freeFoodID
		{
			get
			{
				return this._freeFoodID;
			}
			set
			{
				if ((this._freeFoodID != value))
				{
					this.OnfreeFoodIDChanging(value);
					this.SendPropertyChanging();
					this._freeFoodID = value;
					this.SendPropertyChanged("freeFoodID");
					this.OnfreeFoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discount_DiscountType2", Storage="_Discount", ThisKey="discountID", OtherKey="discountID", IsForeignKey=true)]
		public Discount Discount
		{
			get
			{
				return this._Discount.Entity;
			}
			set
			{
				Discount previousValue = this._Discount.Entity;
				if (((previousValue != value) 
							|| (this._Discount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Discount.Entity = null;
						previousValue.DiscountType2 = null;
					}
					this._Discount.Entity = value;
					if ((value != null))
					{
						value.DiscountType2 = this;
						this._discountID = value.discountID;
					}
					else
					{
						this._discountID = default(string);
					}
					this.SendPropertyChanged("Discount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DiscountType3")]
	public partial class DiscountType3 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _discountID;
		
		private string _description;
		
		private System.Nullable<int> _numOfBroughtFood;
		
		private System.Nullable<int> _freeFoodID;
		
		private EntityRef<Discount> _Discount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndiscountIDChanging(string value);
    partial void OndiscountIDChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnnumOfBroughtFoodChanging(System.Nullable<int> value);
    partial void OnnumOfBroughtFoodChanged();
    partial void OnfreeFoodIDChanging(System.Nullable<int> value);
    partial void OnfreeFoodIDChanged();
    #endregion
		
		public DiscountType3()
		{
			this._Discount = default(EntityRef<Discount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_discountID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string discountID
		{
			get
			{
				return this._discountID;
			}
			set
			{
				if ((this._discountID != value))
				{
					if (this._Discount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndiscountIDChanging(value);
					this.SendPropertyChanging();
					this._discountID = value;
					this.SendPropertyChanged("discountID");
					this.OndiscountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(300)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numOfBroughtFood", DbType="Int")]
		public System.Nullable<int> numOfBroughtFood
		{
			get
			{
				return this._numOfBroughtFood;
			}
			set
			{
				if ((this._numOfBroughtFood != value))
				{
					this.OnnumOfBroughtFoodChanging(value);
					this.SendPropertyChanging();
					this._numOfBroughtFood = value;
					this.SendPropertyChanged("numOfBroughtFood");
					this.OnnumOfBroughtFoodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_freeFoodID", DbType="Int")]
		public System.Nullable<int> freeFoodID
		{
			get
			{
				return this._freeFoodID;
			}
			set
			{
				if ((this._freeFoodID != value))
				{
					this.OnfreeFoodIDChanging(value);
					this.SendPropertyChanging();
					this._freeFoodID = value;
					this.SendPropertyChanged("freeFoodID");
					this.OnfreeFoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discount_DiscountType3", Storage="_Discount", ThisKey="discountID", OtherKey="discountID", IsForeignKey=true)]
		public Discount Discount
		{
			get
			{
				return this._Discount.Entity;
			}
			set
			{
				Discount previousValue = this._Discount.Entity;
				if (((previousValue != value) 
							|| (this._Discount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Discount.Entity = null;
						previousValue.DiscountType3 = null;
					}
					this._Discount.Entity = value;
					if ((value != null))
					{
						value.DiscountType3 = this;
						this._discountID = value.discountID;
					}
					else
					{
						this._discountID = default(string);
					}
					this.SendPropertyChanged("Discount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Food")]
	public partial class Food : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _foodID;
		
		private string _description;
		
		private string _name;
		
		private int _foodStatusID;
		
		private System.Nullable<double> _price;
		
		private EntitySet<FoodCalled> _FoodCalleds;
		
		private EntitySet<IngredientsInFood> _IngredientsInFoods;
		
		private EntityRef<FoodStatus> _FoodStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfoodIDChanging(int value);
    partial void OnfoodIDChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnfoodStatusIDChanging(int value);
    partial void OnfoodStatusIDChanged();
    partial void OnpriceChanging(System.Nullable<double> value);
    partial void OnpriceChanged();
    #endregion
		
		public Food()
		{
			this._FoodCalleds = new EntitySet<FoodCalled>(new Action<FoodCalled>(this.attach_FoodCalleds), new Action<FoodCalled>(this.detach_FoodCalleds));
			this._IngredientsInFoods = new EntitySet<IngredientsInFood>(new Action<IngredientsInFood>(this.attach_IngredientsInFoods), new Action<IngredientsInFood>(this.detach_IngredientsInFoods));
			this._FoodStatus = default(EntityRef<FoodStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_foodID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int foodID
		{
			get
			{
				return this._foodID;
			}
			set
			{
				if ((this._foodID != value))
				{
					this.OnfoodIDChanging(value);
					this.SendPropertyChanging();
					this._foodID = value;
					this.SendPropertyChanged("foodID");
					this.OnfoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(300)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(300)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_foodStatusID", DbType="Int NOT NULL")]
		public int foodStatusID
		{
			get
			{
				return this._foodStatusID;
			}
			set
			{
				if ((this._foodStatusID != value))
				{
					if (this._FoodStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfoodStatusIDChanging(value);
					this.SendPropertyChanging();
					this._foodStatusID = value;
					this.SendPropertyChanged("foodStatusID");
					this.OnfoodStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float")]
		public System.Nullable<double> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_FoodCalled", Storage="_FoodCalleds", ThisKey="foodID", OtherKey="foodID")]
		public EntitySet<FoodCalled> FoodCalleds
		{
			get
			{
				return this._FoodCalleds;
			}
			set
			{
				this._FoodCalleds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_IngredientsInFood", Storage="_IngredientsInFoods", ThisKey="foodID", OtherKey="foodID")]
		public EntitySet<IngredientsInFood> IngredientsInFoods
		{
			get
			{
				return this._IngredientsInFoods;
			}
			set
			{
				this._IngredientsInFoods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FoodStatus_Food", Storage="_FoodStatus", ThisKey="foodStatusID", OtherKey="foodStatusID", IsForeignKey=true)]
		public FoodStatus FoodStatus
		{
			get
			{
				return this._FoodStatus.Entity;
			}
			set
			{
				FoodStatus previousValue = this._FoodStatus.Entity;
				if (((previousValue != value) 
							|| (this._FoodStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FoodStatus.Entity = null;
						previousValue.Foods.Remove(this);
					}
					this._FoodStatus.Entity = value;
					if ((value != null))
					{
						value.Foods.Add(this);
						this._foodStatusID = value.foodStatusID;
					}
					else
					{
						this._foodStatusID = default(int);
					}
					this.SendPropertyChanged("FoodStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FoodCalleds(FoodCalled entity)
		{
			this.SendPropertyChanging();
			entity.Food = this;
		}
		
		private void detach_FoodCalleds(FoodCalled entity)
		{
			this.SendPropertyChanging();
			entity.Food = null;
		}
		
		private void attach_IngredientsInFoods(IngredientsInFood entity)
		{
			this.SendPropertyChanging();
			entity.Food = this;
		}
		
		private void detach_IngredientsInFoods(IngredientsInFood entity)
		{
			this.SendPropertyChanging();
			entity.Food = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FoodCalled")]
	public partial class FoodCalled : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _orderID;
		
		private int _foodID;
		
		private int _quantity;
		
		private EntityRef<Food> _Food;
		
		private EntityRef<OrderBasicInfo> _OrderBasicInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnorderIDChanging(string value);
    partial void OnorderIDChanged();
    partial void OnfoodIDChanging(int value);
    partial void OnfoodIDChanged();
    partial void OnquantityChanging(int value);
    partial void OnquantityChanged();
    #endregion
		
		public FoodCalled()
		{
			this._Food = default(EntityRef<Food>);
			this._OrderBasicInfo = default(EntityRef<OrderBasicInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string orderID
		{
			get
			{
				return this._orderID;
			}
			set
			{
				if ((this._orderID != value))
				{
					if (this._OrderBasicInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnorderIDChanging(value);
					this.SendPropertyChanging();
					this._orderID = value;
					this.SendPropertyChanged("orderID");
					this.OnorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_foodID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int foodID
		{
			get
			{
				return this._foodID;
			}
			set
			{
				if ((this._foodID != value))
				{
					if (this._Food.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfoodIDChanging(value);
					this.SendPropertyChanging();
					this._foodID = value;
					this.SendPropertyChanged("foodID");
					this.OnfoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int NOT NULL")]
		public int quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_FoodCalled", Storage="_Food", ThisKey="foodID", OtherKey="foodID", IsForeignKey=true)]
		public Food Food
		{
			get
			{
				return this._Food.Entity;
			}
			set
			{
				Food previousValue = this._Food.Entity;
				if (((previousValue != value) 
							|| (this._Food.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Food.Entity = null;
						previousValue.FoodCalleds.Remove(this);
					}
					this._Food.Entity = value;
					if ((value != null))
					{
						value.FoodCalleds.Add(this);
						this._foodID = value.foodID;
					}
					else
					{
						this._foodID = default(int);
					}
					this.SendPropertyChanged("Food");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderBasicInfo_FoodCalled", Storage="_OrderBasicInfo", ThisKey="orderID", OtherKey="orderID", IsForeignKey=true)]
		public OrderBasicInfo OrderBasicInfo
		{
			get
			{
				return this._OrderBasicInfo.Entity;
			}
			set
			{
				OrderBasicInfo previousValue = this._OrderBasicInfo.Entity;
				if (((previousValue != value) 
							|| (this._OrderBasicInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderBasicInfo.Entity = null;
						previousValue.FoodCalleds.Remove(this);
					}
					this._OrderBasicInfo.Entity = value;
					if ((value != null))
					{
						value.FoodCalleds.Add(this);
						this._orderID = value.orderID;
					}
					else
					{
						this._orderID = default(string);
					}
					this.SendPropertyChanged("OrderBasicInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FoodOrder")]
	public partial class FoodOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _orderID;
		
		private string _voucherID;
		
		private EntityRef<OrderBasicInfo> _OrderBasicInfo;
		
		private EntityRef<Voucher> _Voucher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnorderIDChanging(string value);
    partial void OnorderIDChanged();
    partial void OnvoucherIDChanging(string value);
    partial void OnvoucherIDChanged();
    #endregion
		
		public FoodOrder()
		{
			this._OrderBasicInfo = default(EntityRef<OrderBasicInfo>);
			this._Voucher = default(EntityRef<Voucher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string orderID
		{
			get
			{
				return this._orderID;
			}
			set
			{
				if ((this._orderID != value))
				{
					if (this._OrderBasicInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnorderIDChanging(value);
					this.SendPropertyChanging();
					this._orderID = value;
					this.SendPropertyChanged("orderID");
					this.OnorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_voucherID", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string voucherID
		{
			get
			{
				return this._voucherID;
			}
			set
			{
				if ((this._voucherID != value))
				{
					if (this._Voucher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvoucherIDChanging(value);
					this.SendPropertyChanging();
					this._voucherID = value;
					this.SendPropertyChanged("voucherID");
					this.OnvoucherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderBasicInfo_FoodOrder", Storage="_OrderBasicInfo", ThisKey="orderID", OtherKey="orderID", IsForeignKey=true)]
		public OrderBasicInfo OrderBasicInfo
		{
			get
			{
				return this._OrderBasicInfo.Entity;
			}
			set
			{
				OrderBasicInfo previousValue = this._OrderBasicInfo.Entity;
				if (((previousValue != value) 
							|| (this._OrderBasicInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderBasicInfo.Entity = null;
						previousValue.FoodOrder = null;
					}
					this._OrderBasicInfo.Entity = value;
					if ((value != null))
					{
						value.FoodOrder = this;
						this._orderID = value.orderID;
					}
					else
					{
						this._orderID = default(string);
					}
					this.SendPropertyChanged("OrderBasicInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Voucher_FoodOrder", Storage="_Voucher", ThisKey="voucherID", OtherKey="voucherID", IsForeignKey=true)]
		public Voucher Voucher
		{
			get
			{
				return this._Voucher.Entity;
			}
			set
			{
				Voucher previousValue = this._Voucher.Entity;
				if (((previousValue != value) 
							|| (this._Voucher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Voucher.Entity = null;
						previousValue.FoodOrders.Remove(this);
					}
					this._Voucher.Entity = value;
					if ((value != null))
					{
						value.FoodOrders.Add(this);
						this._voucherID = value.voucherID;
					}
					else
					{
						this._voucherID = default(string);
					}
					this.SendPropertyChanged("Voucher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FoodStatus")]
	public partial class FoodStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _foodStatusID;
		
		private string _name;
		
		private EntitySet<Food> _Foods;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfoodStatusIDChanging(int value);
    partial void OnfoodStatusIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public FoodStatus()
		{
			this._Foods = new EntitySet<Food>(new Action<Food>(this.attach_Foods), new Action<Food>(this.detach_Foods));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_foodStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int foodStatusID
		{
			get
			{
				return this._foodStatusID;
			}
			set
			{
				if ((this._foodStatusID != value))
				{
					this.OnfoodStatusIDChanging(value);
					this.SendPropertyChanging();
					this._foodStatusID = value;
					this.SendPropertyChanged("foodStatusID");
					this.OnfoodStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(300)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FoodStatus_Food", Storage="_Foods", ThisKey="foodStatusID", OtherKey="foodStatusID")]
		public EntitySet<Food> Foods
		{
			get
			{
				return this._Foods;
			}
			set
			{
				this._Foods.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Foods(Food entity)
		{
			this.SendPropertyChanging();
			entity.FoodStatus = this;
		}
		
		private void detach_Foods(Food entity)
		{
			this.SendPropertyChanging();
			entity.FoodStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gender")]
	public partial class Gender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _genderCode;
		
		private string _name;
		
		private EntitySet<PersonalDetail> _PersonalDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OngenderCodeChanging(int value);
    partial void OngenderCodeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Gender()
		{
			this._PersonalDetails = new EntitySet<PersonalDetail>(new Action<PersonalDetail>(this.attach_PersonalDetails), new Action<PersonalDetail>(this.detach_PersonalDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genderCode", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int genderCode
		{
			get
			{
				return this._genderCode;
			}
			set
			{
				if ((this._genderCode != value))
				{
					this.OngenderCodeChanging(value);
					this.SendPropertyChanging();
					this._genderCode = value;
					this.SendPropertyChanged("genderCode");
					this.OngenderCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(150)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_PersonalDetail", Storage="_PersonalDetails", ThisKey="genderCode", OtherKey="genderCode")]
		public EntitySet<PersonalDetail> PersonalDetails
		{
			get
			{
				return this._PersonalDetails;
			}
			set
			{
				this._PersonalDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PersonalDetails(PersonalDetail entity)
		{
			this.SendPropertyChanging();
			entity.Gender = this;
		}
		
		private void detach_PersonalDetails(PersonalDetail entity)
		{
			this.SendPropertyChanging();
			entity.Gender = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ingredient")]
	public partial class Ingredient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ingredientID;
		
		private int _ingredientDetailsID;
		
		private System.Nullable<int> _quantity;
		
		private EntitySet<IngredientsInFood> _IngredientsInFoods;
		
		private EntityRef<IngredientDetail> _IngredientDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OningredientIDChanging(int value);
    partial void OningredientIDChanged();
    partial void OningredientDetailsIDChanging(int value);
    partial void OningredientDetailsIDChanged();
    partial void OnquantityChanging(System.Nullable<int> value);
    partial void OnquantityChanged();
    #endregion
		
		public Ingredient()
		{
			this._IngredientsInFoods = new EntitySet<IngredientsInFood>(new Action<IngredientsInFood>(this.attach_IngredientsInFoods), new Action<IngredientsInFood>(this.detach_IngredientsInFoods));
			this._IngredientDetail = default(EntityRef<IngredientDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ingredientID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ingredientID
		{
			get
			{
				return this._ingredientID;
			}
			set
			{
				if ((this._ingredientID != value))
				{
					this.OningredientIDChanging(value);
					this.SendPropertyChanging();
					this._ingredientID = value;
					this.SendPropertyChanged("ingredientID");
					this.OningredientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ingredientDetailsID", DbType="Int NOT NULL")]
		public int ingredientDetailsID
		{
			get
			{
				return this._ingredientDetailsID;
			}
			set
			{
				if ((this._ingredientDetailsID != value))
				{
					if (this._IngredientDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OningredientDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._ingredientDetailsID = value;
					this.SendPropertyChanged("ingredientDetailsID");
					this.OningredientDetailsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int")]
		public System.Nullable<int> quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredient_IngredientsInFood", Storage="_IngredientsInFoods", ThisKey="ingredientID", OtherKey="ingredientID")]
		public EntitySet<IngredientsInFood> IngredientsInFoods
		{
			get
			{
				return this._IngredientsInFoods;
			}
			set
			{
				this._IngredientsInFoods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IngredientDetail_Ingredient", Storage="_IngredientDetail", ThisKey="ingredientDetailsID", OtherKey="ingredientDetailsID", IsForeignKey=true)]
		public IngredientDetail IngredientDetail
		{
			get
			{
				return this._IngredientDetail.Entity;
			}
			set
			{
				IngredientDetail previousValue = this._IngredientDetail.Entity;
				if (((previousValue != value) 
							|| (this._IngredientDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IngredientDetail.Entity = null;
						previousValue.Ingredients.Remove(this);
					}
					this._IngredientDetail.Entity = value;
					if ((value != null))
					{
						value.Ingredients.Add(this);
						this._ingredientDetailsID = value.ingredientDetailsID;
					}
					else
					{
						this._ingredientDetailsID = default(int);
					}
					this.SendPropertyChanged("IngredientDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IngredientsInFoods(IngredientsInFood entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = this;
		}
		
		private void detach_IngredientsInFoods(IngredientsInFood entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IngredientDetails")]
	public partial class IngredientDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ingredientDetailsID;
		
		private string _name;
		
		private string _description;
		
		private EntitySet<Ingredient> _Ingredients;
		
		private EntityRef<IngredientInStockDetail> _IngredientInStockDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OningredientDetailsIDChanging(int value);
    partial void OningredientDetailsIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public IngredientDetail()
		{
			this._Ingredients = new EntitySet<Ingredient>(new Action<Ingredient>(this.attach_Ingredients), new Action<Ingredient>(this.detach_Ingredients));
			this._IngredientInStockDetail = default(EntityRef<IngredientInStockDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ingredientDetailsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ingredientDetailsID
		{
			get
			{
				return this._ingredientDetailsID;
			}
			set
			{
				if ((this._ingredientDetailsID != value))
				{
					this.OningredientDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._ingredientDetailsID = value;
					this.SendPropertyChanged("ingredientDetailsID");
					this.OningredientDetailsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(300)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IngredientDetail_Ingredient", Storage="_Ingredients", ThisKey="ingredientDetailsID", OtherKey="ingredientDetailsID")]
		public EntitySet<Ingredient> Ingredients
		{
			get
			{
				return this._Ingredients;
			}
			set
			{
				this._Ingredients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IngredientDetail_IngredientInStockDetail", Storage="_IngredientInStockDetail", ThisKey="ingredientDetailsID", OtherKey="ingredientDetailsID", IsUnique=true, IsForeignKey=false)]
		public IngredientInStockDetail IngredientInStockDetail
		{
			get
			{
				return this._IngredientInStockDetail.Entity;
			}
			set
			{
				IngredientInStockDetail previousValue = this._IngredientInStockDetail.Entity;
				if (((previousValue != value) 
							|| (this._IngredientInStockDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IngredientInStockDetail.Entity = null;
						previousValue.IngredientDetail = null;
					}
					this._IngredientInStockDetail.Entity = value;
					if ((value != null))
					{
						value.IngredientDetail = this;
					}
					this.SendPropertyChanged("IngredientInStockDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ingredients(Ingredient entity)
		{
			this.SendPropertyChanging();
			entity.IngredientDetail = this;
		}
		
		private void detach_Ingredients(Ingredient entity)
		{
			this.SendPropertyChanging();
			entity.IngredientDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IngredientInStockDetails")]
	public partial class IngredientInStockDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ingredientDetailsID;
		
		private int _producerID;
		
		private int _quantity;
		
		private EntitySet<StockOrderDetail> _StockOrderDetails;
		
		private EntityRef<IngredientDetail> _IngredientDetail;
		
		private EntityRef<Producer> _Producer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OningredientDetailsIDChanging(int value);
    partial void OningredientDetailsIDChanged();
    partial void OnproducerIDChanging(int value);
    partial void OnproducerIDChanged();
    partial void OnquantityChanging(int value);
    partial void OnquantityChanged();
    #endregion
		
		public IngredientInStockDetail()
		{
			this._StockOrderDetails = new EntitySet<StockOrderDetail>(new Action<StockOrderDetail>(this.attach_StockOrderDetails), new Action<StockOrderDetail>(this.detach_StockOrderDetails));
			this._IngredientDetail = default(EntityRef<IngredientDetail>);
			this._Producer = default(EntityRef<Producer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ingredientDetailsID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ingredientDetailsID
		{
			get
			{
				return this._ingredientDetailsID;
			}
			set
			{
				if ((this._ingredientDetailsID != value))
				{
					if (this._IngredientDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OningredientDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._ingredientDetailsID = value;
					this.SendPropertyChanged("ingredientDetailsID");
					this.OningredientDetailsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_producerID", DbType="Int NOT NULL")]
		public int producerID
		{
			get
			{
				return this._producerID;
			}
			set
			{
				if ((this._producerID != value))
				{
					if (this._Producer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnproducerIDChanging(value);
					this.SendPropertyChanging();
					this._producerID = value;
					this.SendPropertyChanged("producerID");
					this.OnproducerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int NOT NULL")]
		public int quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IngredientInStockDetail_StockOrderDetail", Storage="_StockOrderDetails", ThisKey="ingredientDetailsID", OtherKey="stockItemDetailsID")]
		public EntitySet<StockOrderDetail> StockOrderDetails
		{
			get
			{
				return this._StockOrderDetails;
			}
			set
			{
				this._StockOrderDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IngredientDetail_IngredientInStockDetail", Storage="_IngredientDetail", ThisKey="ingredientDetailsID", OtherKey="ingredientDetailsID", IsForeignKey=true)]
		public IngredientDetail IngredientDetail
		{
			get
			{
				return this._IngredientDetail.Entity;
			}
			set
			{
				IngredientDetail previousValue = this._IngredientDetail.Entity;
				if (((previousValue != value) 
							|| (this._IngredientDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IngredientDetail.Entity = null;
						previousValue.IngredientInStockDetail = null;
					}
					this._IngredientDetail.Entity = value;
					if ((value != null))
					{
						value.IngredientInStockDetail = this;
						this._ingredientDetailsID = value.ingredientDetailsID;
					}
					else
					{
						this._ingredientDetailsID = default(int);
					}
					this.SendPropertyChanged("IngredientDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Producer_IngredientInStockDetail", Storage="_Producer", ThisKey="producerID", OtherKey="producerID", IsForeignKey=true)]
		public Producer Producer
		{
			get
			{
				return this._Producer.Entity;
			}
			set
			{
				Producer previousValue = this._Producer.Entity;
				if (((previousValue != value) 
							|| (this._Producer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Producer.Entity = null;
						previousValue.IngredientInStockDetails.Remove(this);
					}
					this._Producer.Entity = value;
					if ((value != null))
					{
						value.IngredientInStockDetails.Add(this);
						this._producerID = value.producerID;
					}
					else
					{
						this._producerID = default(int);
					}
					this.SendPropertyChanged("Producer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StockOrderDetails(StockOrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.IngredientInStockDetail = this;
		}
		
		private void detach_StockOrderDetails(StockOrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.IngredientInStockDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IngredientsInFood")]
	public partial class IngredientsInFood : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _foodID;
		
		private int _ingredientID;
		
		private EntityRef<Ingredient> _Ingredient;
		
		private EntityRef<Food> _Food;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfoodIDChanging(int value);
    partial void OnfoodIDChanged();
    partial void OningredientIDChanging(int value);
    partial void OningredientIDChanged();
    #endregion
		
		public IngredientsInFood()
		{
			this._Ingredient = default(EntityRef<Ingredient>);
			this._Food = default(EntityRef<Food>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_foodID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int foodID
		{
			get
			{
				return this._foodID;
			}
			set
			{
				if ((this._foodID != value))
				{
					if (this._Food.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfoodIDChanging(value);
					this.SendPropertyChanging();
					this._foodID = value;
					this.SendPropertyChanged("foodID");
					this.OnfoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ingredientID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ingredientID
		{
			get
			{
				return this._ingredientID;
			}
			set
			{
				if ((this._ingredientID != value))
				{
					if (this._Ingredient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OningredientIDChanging(value);
					this.SendPropertyChanging();
					this._ingredientID = value;
					this.SendPropertyChanged("ingredientID");
					this.OningredientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredient_IngredientsInFood", Storage="_Ingredient", ThisKey="ingredientID", OtherKey="ingredientID", IsForeignKey=true)]
		public Ingredient Ingredient
		{
			get
			{
				return this._Ingredient.Entity;
			}
			set
			{
				Ingredient previousValue = this._Ingredient.Entity;
				if (((previousValue != value) 
							|| (this._Ingredient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ingredient.Entity = null;
						previousValue.IngredientsInFoods.Remove(this);
					}
					this._Ingredient.Entity = value;
					if ((value != null))
					{
						value.IngredientsInFoods.Add(this);
						this._ingredientID = value.ingredientID;
					}
					else
					{
						this._ingredientID = default(int);
					}
					this.SendPropertyChanged("Ingredient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_IngredientsInFood", Storage="_Food", ThisKey="foodID", OtherKey="foodID", IsForeignKey=true)]
		public Food Food
		{
			get
			{
				return this._Food.Entity;
			}
			set
			{
				Food previousValue = this._Food.Entity;
				if (((previousValue != value) 
							|| (this._Food.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Food.Entity = null;
						previousValue.IngredientsInFoods.Remove(this);
					}
					this._Food.Entity = value;
					if ((value != null))
					{
						value.IngredientsInFoods.Add(this);
						this._foodID = value.foodID;
					}
					else
					{
						this._foodID = default(int);
					}
					this.SendPropertyChanged("Food");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Occupation")]
	public partial class Occupation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _occupationCode;
		
		private string _name;
		
		private EntitySet<StaffDetail> _StaffDetails;
		
		private EntitySet<VIP> _VIPs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnoccupationCodeChanging(int value);
    partial void OnoccupationCodeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Occupation()
		{
			this._StaffDetails = new EntitySet<StaffDetail>(new Action<StaffDetail>(this.attach_StaffDetails), new Action<StaffDetail>(this.detach_StaffDetails));
			this._VIPs = new EntitySet<VIP>(new Action<VIP>(this.attach_VIPs), new Action<VIP>(this.detach_VIPs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_occupationCode", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int occupationCode
		{
			get
			{
				return this._occupationCode;
			}
			set
			{
				if ((this._occupationCode != value))
				{
					this.OnoccupationCodeChanging(value);
					this.SendPropertyChanging();
					this._occupationCode = value;
					this.SendPropertyChanged("occupationCode");
					this.OnoccupationCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(150)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Occupation_StaffDetail", Storage="_StaffDetails", ThisKey="occupationCode", OtherKey="occupationCode")]
		public EntitySet<StaffDetail> StaffDetails
		{
			get
			{
				return this._StaffDetails;
			}
			set
			{
				this._StaffDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Occupation_VIP", Storage="_VIPs", ThisKey="occupationCode", OtherKey="occupationCode")]
		public EntitySet<VIP> VIPs
		{
			get
			{
				return this._VIPs;
			}
			set
			{
				this._VIPs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StaffDetails(StaffDetail entity)
		{
			this.SendPropertyChanging();
			entity.Occupation = this;
		}
		
		private void detach_StaffDetails(StaffDetail entity)
		{
			this.SendPropertyChanging();
			entity.Occupation = null;
		}
		
		private void attach_VIPs(VIP entity)
		{
			this.SendPropertyChanging();
			entity.Occupation = this;
		}
		
		private void detach_VIPs(VIP entity)
		{
			this.SendPropertyChanging();
			entity.Occupation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderBasicInfo")]
	public partial class OrderBasicInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _orderID;
		
		private System.Nullable<System.DateTime> _dateCreated;
		
		private System.Nullable<int> _priorityNumber;
		
		private System.Nullable<double> _totalPayment;
		
		private System.Nullable<double> _charge;
		
		private int _orderStatusCode;
		
		private string _cashierID;
		
		private EntityRef<BookBorrowOrder> _BookBorrowOrder;
		
		private EntityRef<BookReturnOrder> _BookReturnOrder;
		
		private EntitySet<FoodCalled> _FoodCalleds;
		
		private EntityRef<FoodOrder> _FoodOrder;
		
		private EntitySet<VIPOrder> _VIPOrders;
		
		private EntityRef<OrderStatus> _OrderStatus;
		
		private EntityRef<StaffDetail> _StaffDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnorderIDChanging(string value);
    partial void OnorderIDChanged();
    partial void OndateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OndateCreatedChanged();
    partial void OnpriorityNumberChanging(System.Nullable<int> value);
    partial void OnpriorityNumberChanged();
    partial void OntotalPaymentChanging(System.Nullable<double> value);
    partial void OntotalPaymentChanged();
    partial void OnchargeChanging(System.Nullable<double> value);
    partial void OnchargeChanged();
    partial void OnorderStatusCodeChanging(int value);
    partial void OnorderStatusCodeChanged();
    partial void OncashierIDChanging(string value);
    partial void OncashierIDChanged();
    #endregion
		
		public OrderBasicInfo()
		{
			this._BookBorrowOrder = default(EntityRef<BookBorrowOrder>);
			this._BookReturnOrder = default(EntityRef<BookReturnOrder>);
			this._FoodCalleds = new EntitySet<FoodCalled>(new Action<FoodCalled>(this.attach_FoodCalleds), new Action<FoodCalled>(this.detach_FoodCalleds));
			this._FoodOrder = default(EntityRef<FoodOrder>);
			this._VIPOrders = new EntitySet<VIPOrder>(new Action<VIPOrder>(this.attach_VIPOrders), new Action<VIPOrder>(this.detach_VIPOrders));
			this._OrderStatus = default(EntityRef<OrderStatus>);
			this._StaffDetail = default(EntityRef<StaffDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string orderID
		{
			get
			{
				return this._orderID;
			}
			set
			{
				if ((this._orderID != value))
				{
					this.OnorderIDChanging(value);
					this.SendPropertyChanging();
					this._orderID = value;
					this.SendPropertyChanged("orderID");
					this.OnorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateCreated
		{
			get
			{
				return this._dateCreated;
			}
			set
			{
				if ((this._dateCreated != value))
				{
					this.OndateCreatedChanging(value);
					this.SendPropertyChanging();
					this._dateCreated = value;
					this.SendPropertyChanged("dateCreated");
					this.OndateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priorityNumber", DbType="Int")]
		public System.Nullable<int> priorityNumber
		{
			get
			{
				return this._priorityNumber;
			}
			set
			{
				if ((this._priorityNumber != value))
				{
					this.OnpriorityNumberChanging(value);
					this.SendPropertyChanging();
					this._priorityNumber = value;
					this.SendPropertyChanged("priorityNumber");
					this.OnpriorityNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_totalPayment", DbType="Float")]
		public System.Nullable<double> totalPayment
		{
			get
			{
				return this._totalPayment;
			}
			set
			{
				if ((this._totalPayment != value))
				{
					this.OntotalPaymentChanging(value);
					this.SendPropertyChanging();
					this._totalPayment = value;
					this.SendPropertyChanged("totalPayment");
					this.OntotalPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_charge", DbType="Float")]
		public System.Nullable<double> charge
		{
			get
			{
				return this._charge;
			}
			set
			{
				if ((this._charge != value))
				{
					this.OnchargeChanging(value);
					this.SendPropertyChanging();
					this._charge = value;
					this.SendPropertyChanged("charge");
					this.OnchargeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderStatusCode", DbType="Int NOT NULL")]
		public int orderStatusCode
		{
			get
			{
				return this._orderStatusCode;
			}
			set
			{
				if ((this._orderStatusCode != value))
				{
					if (this._OrderStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnorderStatusCodeChanging(value);
					this.SendPropertyChanging();
					this._orderStatusCode = value;
					this.SendPropertyChanged("orderStatusCode");
					this.OnorderStatusCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cashierID", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string cashierID
		{
			get
			{
				return this._cashierID;
			}
			set
			{
				if ((this._cashierID != value))
				{
					if (this._StaffDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncashierIDChanging(value);
					this.SendPropertyChanging();
					this._cashierID = value;
					this.SendPropertyChanged("cashierID");
					this.OncashierIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderBasicInfo_BookBorrowOrder", Storage="_BookBorrowOrder", ThisKey="orderID", OtherKey="orderID", IsUnique=true, IsForeignKey=false)]
		public BookBorrowOrder BookBorrowOrder
		{
			get
			{
				return this._BookBorrowOrder.Entity;
			}
			set
			{
				BookBorrowOrder previousValue = this._BookBorrowOrder.Entity;
				if (((previousValue != value) 
							|| (this._BookBorrowOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BookBorrowOrder.Entity = null;
						previousValue.OrderBasicInfo = null;
					}
					this._BookBorrowOrder.Entity = value;
					if ((value != null))
					{
						value.OrderBasicInfo = this;
					}
					this.SendPropertyChanged("BookBorrowOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderBasicInfo_BookReturnOrder", Storage="_BookReturnOrder", ThisKey="orderID", OtherKey="orderID", IsUnique=true, IsForeignKey=false)]
		public BookReturnOrder BookReturnOrder
		{
			get
			{
				return this._BookReturnOrder.Entity;
			}
			set
			{
				BookReturnOrder previousValue = this._BookReturnOrder.Entity;
				if (((previousValue != value) 
							|| (this._BookReturnOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BookReturnOrder.Entity = null;
						previousValue.OrderBasicInfo = null;
					}
					this._BookReturnOrder.Entity = value;
					if ((value != null))
					{
						value.OrderBasicInfo = this;
					}
					this.SendPropertyChanged("BookReturnOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderBasicInfo_FoodCalled", Storage="_FoodCalleds", ThisKey="orderID", OtherKey="orderID")]
		public EntitySet<FoodCalled> FoodCalleds
		{
			get
			{
				return this._FoodCalleds;
			}
			set
			{
				this._FoodCalleds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderBasicInfo_FoodOrder", Storage="_FoodOrder", ThisKey="orderID", OtherKey="orderID", IsUnique=true, IsForeignKey=false)]
		public FoodOrder FoodOrder
		{
			get
			{
				return this._FoodOrder.Entity;
			}
			set
			{
				FoodOrder previousValue = this._FoodOrder.Entity;
				if (((previousValue != value) 
							|| (this._FoodOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FoodOrder.Entity = null;
						previousValue.OrderBasicInfo = null;
					}
					this._FoodOrder.Entity = value;
					if ((value != null))
					{
						value.OrderBasicInfo = this;
					}
					this.SendPropertyChanged("FoodOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderBasicInfo_VIPOrder", Storage="_VIPOrders", ThisKey="orderID", OtherKey="orderID")]
		public EntitySet<VIPOrder> VIPOrders
		{
			get
			{
				return this._VIPOrders;
			}
			set
			{
				this._VIPOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderStatus_OrderBasicInfo", Storage="_OrderStatus", ThisKey="orderStatusCode", OtherKey="orderStatusCode", IsForeignKey=true)]
		public OrderStatus OrderStatus
		{
			get
			{
				return this._OrderStatus.Entity;
			}
			set
			{
				OrderStatus previousValue = this._OrderStatus.Entity;
				if (((previousValue != value) 
							|| (this._OrderStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderStatus.Entity = null;
						previousValue.OrderBasicInfos.Remove(this);
					}
					this._OrderStatus.Entity = value;
					if ((value != null))
					{
						value.OrderBasicInfos.Add(this);
						this._orderStatusCode = value.orderStatusCode;
					}
					else
					{
						this._orderStatusCode = default(int);
					}
					this.SendPropertyChanged("OrderStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffDetail_OrderBasicInfo", Storage="_StaffDetail", ThisKey="cashierID", OtherKey="staffID", IsForeignKey=true)]
		public StaffDetail StaffDetail
		{
			get
			{
				return this._StaffDetail.Entity;
			}
			set
			{
				StaffDetail previousValue = this._StaffDetail.Entity;
				if (((previousValue != value) 
							|| (this._StaffDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffDetail.Entity = null;
						previousValue.OrderBasicInfos.Remove(this);
					}
					this._StaffDetail.Entity = value;
					if ((value != null))
					{
						value.OrderBasicInfos.Add(this);
						this._cashierID = value.staffID;
					}
					else
					{
						this._cashierID = default(string);
					}
					this.SendPropertyChanged("StaffDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FoodCalleds(FoodCalled entity)
		{
			this.SendPropertyChanging();
			entity.OrderBasicInfo = this;
		}
		
		private void detach_FoodCalleds(FoodCalled entity)
		{
			this.SendPropertyChanging();
			entity.OrderBasicInfo = null;
		}
		
		private void attach_VIPOrders(VIPOrder entity)
		{
			this.SendPropertyChanging();
			entity.OrderBasicInfo = this;
		}
		
		private void detach_VIPOrders(VIPOrder entity)
		{
			this.SendPropertyChanging();
			entity.OrderBasicInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderStatus")]
	public partial class OrderStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _orderStatusCode;
		
		private string _name;
		
		private EntitySet<OrderBasicInfo> _OrderBasicInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnorderStatusCodeChanging(int value);
    partial void OnorderStatusCodeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public OrderStatus()
		{
			this._OrderBasicInfos = new EntitySet<OrderBasicInfo>(new Action<OrderBasicInfo>(this.attach_OrderBasicInfos), new Action<OrderBasicInfo>(this.detach_OrderBasicInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderStatusCode", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int orderStatusCode
		{
			get
			{
				return this._orderStatusCode;
			}
			set
			{
				if ((this._orderStatusCode != value))
				{
					this.OnorderStatusCodeChanging(value);
					this.SendPropertyChanging();
					this._orderStatusCode = value;
					this.SendPropertyChanged("orderStatusCode");
					this.OnorderStatusCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderStatus_OrderBasicInfo", Storage="_OrderBasicInfos", ThisKey="orderStatusCode", OtherKey="orderStatusCode")]
		public EntitySet<OrderBasicInfo> OrderBasicInfos
		{
			get
			{
				return this._OrderBasicInfos;
			}
			set
			{
				this._OrderBasicInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderBasicInfos(OrderBasicInfo entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = this;
		}
		
		private void detach_OrderBasicInfos(OrderBasicInfo entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Parameter")]
	public partial class Parameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _parameterID;
		
		private string _parameterName;
		
		private string _value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnparameterIDChanging(int value);
    partial void OnparameterIDChanged();
    partial void OnparameterNameChanging(string value);
    partial void OnparameterNameChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    #endregion
		
		public Parameter()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parameterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int parameterID
		{
			get
			{
				return this._parameterID;
			}
			set
			{
				if ((this._parameterID != value))
				{
					this.OnparameterIDChanging(value);
					this.SendPropertyChanging();
					this._parameterID = value;
					this.SendPropertyChanged("parameterID");
					this.OnparameterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parameterName", DbType="NVarChar(150)")]
		public string parameterName
		{
			get
			{
				return this._parameterName;
			}
			set
			{
				if ((this._parameterName != value))
				{
					this.OnparameterNameChanging(value);
					this.SendPropertyChanging();
					this._parameterName = value;
					this.SendPropertyChanged("parameterName");
					this.OnparameterNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NVarChar(300)")]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonalDetails")]
	public partial class PersonalDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _personalDetailsID;
		
		private string _address;
		
		private string _cilivianID;
		
		private string _contactNumber;
		
		private System.Nullable<System.DateTime> _dateOfBirth;
		
		private string _fullName;
		
		private int _genderCode;
		
		private EntitySet<StaffDetail> _StaffDetails;
		
		private EntitySet<VIP> _VIPs;
		
		private EntityRef<Gender> _Gender;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpersonalDetailsIDChanging(int value);
    partial void OnpersonalDetailsIDChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OncilivianIDChanging(string value);
    partial void OncilivianIDChanged();
    partial void OncontactNumberChanging(string value);
    partial void OncontactNumberChanged();
    partial void OndateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OndateOfBirthChanged();
    partial void OnfullNameChanging(string value);
    partial void OnfullNameChanged();
    partial void OngenderCodeChanging(int value);
    partial void OngenderCodeChanged();
    #endregion
		
		public PersonalDetail()
		{
			this._StaffDetails = new EntitySet<StaffDetail>(new Action<StaffDetail>(this.attach_StaffDetails), new Action<StaffDetail>(this.detach_StaffDetails));
			this._VIPs = new EntitySet<VIP>(new Action<VIP>(this.attach_VIPs), new Action<VIP>(this.detach_VIPs));
			this._Gender = default(EntityRef<Gender>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_personalDetailsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int personalDetailsID
		{
			get
			{
				return this._personalDetailsID;
			}
			set
			{
				if ((this._personalDetailsID != value))
				{
					this.OnpersonalDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._personalDetailsID = value;
					this.SendPropertyChanged("personalDetailsID");
					this.OnpersonalDetailsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(300)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cilivianID", DbType="NVarChar(100)")]
		public string cilivianID
		{
			get
			{
				return this._cilivianID;
			}
			set
			{
				if ((this._cilivianID != value))
				{
					this.OncilivianIDChanging(value);
					this.SendPropertyChanging();
					this._cilivianID = value;
					this.SendPropertyChanged("cilivianID");
					this.OncilivianIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contactNumber", DbType="NVarChar(100)")]
		public string contactNumber
		{
			get
			{
				return this._contactNumber;
			}
			set
			{
				if ((this._contactNumber != value))
				{
					this.OncontactNumberChanging(value);
					this.SendPropertyChanging();
					this._contactNumber = value;
					this.SendPropertyChanged("contactNumber");
					this.OncontactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> dateOfBirth
		{
			get
			{
				return this._dateOfBirth;
			}
			set
			{
				if ((this._dateOfBirth != value))
				{
					this.OndateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._dateOfBirth = value;
					this.SendPropertyChanged("dateOfBirth");
					this.OndateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fullName", DbType="NVarChar(200)")]
		public string fullName
		{
			get
			{
				return this._fullName;
			}
			set
			{
				if ((this._fullName != value))
				{
					this.OnfullNameChanging(value);
					this.SendPropertyChanging();
					this._fullName = value;
					this.SendPropertyChanged("fullName");
					this.OnfullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genderCode", DbType="Int NOT NULL")]
		public int genderCode
		{
			get
			{
				return this._genderCode;
			}
			set
			{
				if ((this._genderCode != value))
				{
					if (this._Gender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngenderCodeChanging(value);
					this.SendPropertyChanging();
					this._genderCode = value;
					this.SendPropertyChanged("genderCode");
					this.OngenderCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonalDetail_StaffDetail", Storage="_StaffDetails", ThisKey="personalDetailsID", OtherKey="personalDetailsID")]
		public EntitySet<StaffDetail> StaffDetails
		{
			get
			{
				return this._StaffDetails;
			}
			set
			{
				this._StaffDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonalDetail_VIP", Storage="_VIPs", ThisKey="personalDetailsID", OtherKey="personalDetailsID")]
		public EntitySet<VIP> VIPs
		{
			get
			{
				return this._VIPs;
			}
			set
			{
				this._VIPs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_PersonalDetail", Storage="_Gender", ThisKey="genderCode", OtherKey="genderCode", IsForeignKey=true)]
		public Gender Gender
		{
			get
			{
				return this._Gender.Entity;
			}
			set
			{
				Gender previousValue = this._Gender.Entity;
				if (((previousValue != value) 
							|| (this._Gender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gender.Entity = null;
						previousValue.PersonalDetails.Remove(this);
					}
					this._Gender.Entity = value;
					if ((value != null))
					{
						value.PersonalDetails.Add(this);
						this._genderCode = value.genderCode;
					}
					else
					{
						this._genderCode = default(int);
					}
					this.SendPropertyChanged("Gender");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StaffDetails(StaffDetail entity)
		{
			this.SendPropertyChanging();
			entity.PersonalDetail = this;
		}
		
		private void detach_StaffDetails(StaffDetail entity)
		{
			this.SendPropertyChanging();
			entity.PersonalDetail = null;
		}
		
		private void attach_VIPs(VIP entity)
		{
			this.SendPropertyChanging();
			entity.PersonalDetail = this;
		}
		
		private void detach_VIPs(VIP entity)
		{
			this.SendPropertyChanging();
			entity.PersonalDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Producer")]
	public partial class Producer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _producerID;
		
		private string _name;
		
		private string _description;
		
		private EntitySet<IngredientInStockDetail> _IngredientInStockDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnproducerIDChanging(int value);
    partial void OnproducerIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public Producer()
		{
			this._IngredientInStockDetails = new EntitySet<IngredientInStockDetail>(new Action<IngredientInStockDetail>(this.attach_IngredientInStockDetails), new Action<IngredientInStockDetail>(this.detach_IngredientInStockDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_producerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int producerID
		{
			get
			{
				return this._producerID;
			}
			set
			{
				if ((this._producerID != value))
				{
					this.OnproducerIDChanging(value);
					this.SendPropertyChanging();
					this._producerID = value;
					this.SendPropertyChanged("producerID");
					this.OnproducerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(300)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(300)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Producer_IngredientInStockDetail", Storage="_IngredientInStockDetails", ThisKey="producerID", OtherKey="producerID")]
		public EntitySet<IngredientInStockDetail> IngredientInStockDetails
		{
			get
			{
				return this._IngredientInStockDetails;
			}
			set
			{
				this._IngredientInStockDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IngredientInStockDetails(IngredientInStockDetail entity)
		{
			this.SendPropertyChanging();
			entity.Producer = this;
		}
		
		private void detach_IngredientInStockDetails(IngredientInStockDetail entity)
		{
			this.SendPropertyChanging();
			entity.Producer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Publisher")]
	public partial class Publisher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _publisherID;
		
		private string _name;
		
		private string _description;
		
		private EntitySet<BookDetail> _BookDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpublisherIDChanging(int value);
    partial void OnpublisherIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public Publisher()
		{
			this._BookDetails = new EntitySet<BookDetail>(new Action<BookDetail>(this.attach_BookDetails), new Action<BookDetail>(this.detach_BookDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publisherID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int publisherID
		{
			get
			{
				return this._publisherID;
			}
			set
			{
				if ((this._publisherID != value))
				{
					this.OnpublisherIDChanging(value);
					this.SendPropertyChanging();
					this._publisherID = value;
					this.SendPropertyChanged("publisherID");
					this.OnpublisherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(300)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(1000)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publisher_BookDetail", Storage="_BookDetails", ThisKey="publisherID", OtherKey="publisherID")]
		public EntitySet<BookDetail> BookDetails
		{
			get
			{
				return this._BookDetails;
			}
			set
			{
				this._BookDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookDetails(BookDetail entity)
		{
			this.SendPropertyChanging();
			entity.Publisher = this;
		}
		
		private void detach_BookDetails(BookDetail entity)
		{
			this.SendPropertyChanging();
			entity.Publisher = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schedule")]
	public partial class Schedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _scheduleID;
		
		private System.Nullable<System.DateTime> _date;
		
		private int _workingShiftID;
		
		private EntitySet<WorkingWarehouseManager> _WorkingWarehouseManagers;
		
		private EntitySet<WorkingCashier> _WorkingCashiers;
		
		private EntitySet<WorkingManager> _WorkingManagers;
		
		private EntitySet<WorkingRegularStaff> _WorkingRegularStaffs;
		
		private EntityRef<WorkingShiftInfo> _WorkingShiftInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnscheduleIDChanging(int value);
    partial void OnscheduleIDChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OnworkingShiftIDChanging(int value);
    partial void OnworkingShiftIDChanged();
    #endregion
		
		public Schedule()
		{
			this._WorkingWarehouseManagers = new EntitySet<WorkingWarehouseManager>(new Action<WorkingWarehouseManager>(this.attach_WorkingWarehouseManagers), new Action<WorkingWarehouseManager>(this.detach_WorkingWarehouseManagers));
			this._WorkingCashiers = new EntitySet<WorkingCashier>(new Action<WorkingCashier>(this.attach_WorkingCashiers), new Action<WorkingCashier>(this.detach_WorkingCashiers));
			this._WorkingManagers = new EntitySet<WorkingManager>(new Action<WorkingManager>(this.attach_WorkingManagers), new Action<WorkingManager>(this.detach_WorkingManagers));
			this._WorkingRegularStaffs = new EntitySet<WorkingRegularStaff>(new Action<WorkingRegularStaff>(this.attach_WorkingRegularStaffs), new Action<WorkingRegularStaff>(this.detach_WorkingRegularStaffs));
			this._WorkingShiftInfo = default(EntityRef<WorkingShiftInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scheduleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int scheduleID
		{
			get
			{
				return this._scheduleID;
			}
			set
			{
				if ((this._scheduleID != value))
				{
					this.OnscheduleIDChanging(value);
					this.SendPropertyChanging();
					this._scheduleID = value;
					this.SendPropertyChanged("scheduleID");
					this.OnscheduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workingShiftID", DbType="Int NOT NULL")]
		public int workingShiftID
		{
			get
			{
				return this._workingShiftID;
			}
			set
			{
				if ((this._workingShiftID != value))
				{
					if (this._WorkingShiftInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnworkingShiftIDChanging(value);
					this.SendPropertyChanging();
					this._workingShiftID = value;
					this.SendPropertyChanged("workingShiftID");
					this.OnworkingShiftIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_WorkingWarehouseManager", Storage="_WorkingWarehouseManagers", ThisKey="scheduleID", OtherKey="scheduleID")]
		public EntitySet<WorkingWarehouseManager> WorkingWarehouseManagers
		{
			get
			{
				return this._WorkingWarehouseManagers;
			}
			set
			{
				this._WorkingWarehouseManagers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_WorkingCashier", Storage="_WorkingCashiers", ThisKey="scheduleID", OtherKey="scheduleID")]
		public EntitySet<WorkingCashier> WorkingCashiers
		{
			get
			{
				return this._WorkingCashiers;
			}
			set
			{
				this._WorkingCashiers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_WorkingManager", Storage="_WorkingManagers", ThisKey="scheduleID", OtherKey="scheduleID")]
		public EntitySet<WorkingManager> WorkingManagers
		{
			get
			{
				return this._WorkingManagers;
			}
			set
			{
				this._WorkingManagers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_WorkingRegularStaff", Storage="_WorkingRegularStaffs", ThisKey="scheduleID", OtherKey="scheduleID")]
		public EntitySet<WorkingRegularStaff> WorkingRegularStaffs
		{
			get
			{
				return this._WorkingRegularStaffs;
			}
			set
			{
				this._WorkingRegularStaffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkingShiftInfo_Schedule", Storage="_WorkingShiftInfo", ThisKey="workingShiftID", OtherKey="workingShiftID", IsForeignKey=true)]
		public WorkingShiftInfo WorkingShiftInfo
		{
			get
			{
				return this._WorkingShiftInfo.Entity;
			}
			set
			{
				WorkingShiftInfo previousValue = this._WorkingShiftInfo.Entity;
				if (((previousValue != value) 
							|| (this._WorkingShiftInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkingShiftInfo.Entity = null;
						previousValue.Schedules.Remove(this);
					}
					this._WorkingShiftInfo.Entity = value;
					if ((value != null))
					{
						value.Schedules.Add(this);
						this._workingShiftID = value.workingShiftID;
					}
					else
					{
						this._workingShiftID = default(int);
					}
					this.SendPropertyChanged("WorkingShiftInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkingWarehouseManagers(WorkingWarehouseManager entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = this;
		}
		
		private void detach_WorkingWarehouseManagers(WorkingWarehouseManager entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = null;
		}
		
		private void attach_WorkingCashiers(WorkingCashier entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = this;
		}
		
		private void detach_WorkingCashiers(WorkingCashier entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = null;
		}
		
		private void attach_WorkingManagers(WorkingManager entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = this;
		}
		
		private void detach_WorkingManagers(WorkingManager entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = null;
		}
		
		private void attach_WorkingRegularStaffs(WorkingRegularStaff entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = this;
		}
		
		private void detach_WorkingRegularStaffs(WorkingRegularStaff entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StaffAccount")]
	public partial class StaffAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _staffID;
		
		private string _username;
		
		private string _password;
		
		private EntityRef<StaffDetail> _StaffDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstaffIDChanging(string value);
    partial void OnstaffIDChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    #endregion
		
		public StaffAccount()
		{
			this._StaffDetail = default(EntityRef<StaffDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staffID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string staffID
		{
			get
			{
				return this._staffID;
			}
			set
			{
				if ((this._staffID != value))
				{
					if (this._StaffDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstaffIDChanging(value);
					this.SendPropertyChanging();
					this._staffID = value;
					this.SendPropertyChanged("staffID");
					this.OnstaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="NVarChar(200)")]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(300)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffDetail_StaffAccount", Storage="_StaffDetail", ThisKey="staffID", OtherKey="staffID", IsForeignKey=true)]
		public StaffDetail StaffDetail
		{
			get
			{
				return this._StaffDetail.Entity;
			}
			set
			{
				StaffDetail previousValue = this._StaffDetail.Entity;
				if (((previousValue != value) 
							|| (this._StaffDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffDetail.Entity = null;
						previousValue.StaffAccount = null;
					}
					this._StaffDetail.Entity = value;
					if ((value != null))
					{
						value.StaffAccount = this;
						this._staffID = value.staffID;
					}
					else
					{
						this._staffID = default(string);
					}
					this.SendPropertyChanged("StaffDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StaffDetails")]
	public partial class StaffDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _staffID;
		
		private int _personalDetailsID;
		
		private int _positionCode;
		
		private System.Nullable<double> _currentSalaryPerHour;
		
		private System.Nullable<double> _workingHour;
		
		private int _staffStatusCode;
		
		private int _occupationCode;
		
		private string _description;
		
		private EntitySet<WorkingWarehouseManager> _WorkingWarehouseManagers;
		
		private EntitySet<OrderBasicInfo> _OrderBasicInfos;
		
		private EntityRef<StaffAccount> _StaffAccount;
		
		private EntitySet<StockOrder> _StockOrders;
		
		private EntitySet<WorkingCashier> _WorkingCashiers;
		
		private EntitySet<WorkingManager> _WorkingManagers;
		
		private EntitySet<WorkingRegularStaff> _WorkingRegularStaffs;
		
		private EntityRef<Occupation> _Occupation;
		
		private EntityRef<PersonalDetail> _PersonalDetail;
		
		private EntityRef<StaffPosition> _StaffPosition;
		
		private EntityRef<StaffStatus> _StaffStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstaffIDChanging(string value);
    partial void OnstaffIDChanged();
    partial void OnpersonalDetailsIDChanging(int value);
    partial void OnpersonalDetailsIDChanged();
    partial void OnpositionCodeChanging(int value);
    partial void OnpositionCodeChanged();
    partial void OncurrentSalaryPerHourChanging(System.Nullable<double> value);
    partial void OncurrentSalaryPerHourChanged();
    partial void OnworkingHourChanging(System.Nullable<double> value);
    partial void OnworkingHourChanged();
    partial void OnstaffStatusCodeChanging(int value);
    partial void OnstaffStatusCodeChanged();
    partial void OnoccupationCodeChanging(int value);
    partial void OnoccupationCodeChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public StaffDetail()
		{
			this._WorkingWarehouseManagers = new EntitySet<WorkingWarehouseManager>(new Action<WorkingWarehouseManager>(this.attach_WorkingWarehouseManagers), new Action<WorkingWarehouseManager>(this.detach_WorkingWarehouseManagers));
			this._OrderBasicInfos = new EntitySet<OrderBasicInfo>(new Action<OrderBasicInfo>(this.attach_OrderBasicInfos), new Action<OrderBasicInfo>(this.detach_OrderBasicInfos));
			this._StaffAccount = default(EntityRef<StaffAccount>);
			this._StockOrders = new EntitySet<StockOrder>(new Action<StockOrder>(this.attach_StockOrders), new Action<StockOrder>(this.detach_StockOrders));
			this._WorkingCashiers = new EntitySet<WorkingCashier>(new Action<WorkingCashier>(this.attach_WorkingCashiers), new Action<WorkingCashier>(this.detach_WorkingCashiers));
			this._WorkingManagers = new EntitySet<WorkingManager>(new Action<WorkingManager>(this.attach_WorkingManagers), new Action<WorkingManager>(this.detach_WorkingManagers));
			this._WorkingRegularStaffs = new EntitySet<WorkingRegularStaff>(new Action<WorkingRegularStaff>(this.attach_WorkingRegularStaffs), new Action<WorkingRegularStaff>(this.detach_WorkingRegularStaffs));
			this._Occupation = default(EntityRef<Occupation>);
			this._PersonalDetail = default(EntityRef<PersonalDetail>);
			this._StaffPosition = default(EntityRef<StaffPosition>);
			this._StaffStatus = default(EntityRef<StaffStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staffID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string staffID
		{
			get
			{
				return this._staffID;
			}
			set
			{
				if ((this._staffID != value))
				{
					this.OnstaffIDChanging(value);
					this.SendPropertyChanging();
					this._staffID = value;
					this.SendPropertyChanged("staffID");
					this.OnstaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_personalDetailsID", DbType="Int NOT NULL")]
		public int personalDetailsID
		{
			get
			{
				return this._personalDetailsID;
			}
			set
			{
				if ((this._personalDetailsID != value))
				{
					if (this._PersonalDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpersonalDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._personalDetailsID = value;
					this.SendPropertyChanged("personalDetailsID");
					this.OnpersonalDetailsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_positionCode", DbType="Int NOT NULL")]
		public int positionCode
		{
			get
			{
				return this._positionCode;
			}
			set
			{
				if ((this._positionCode != value))
				{
					if (this._StaffPosition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpositionCodeChanging(value);
					this.SendPropertyChanging();
					this._positionCode = value;
					this.SendPropertyChanged("positionCode");
					this.OnpositionCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currentSalaryPerHour", DbType="Float")]
		public System.Nullable<double> currentSalaryPerHour
		{
			get
			{
				return this._currentSalaryPerHour;
			}
			set
			{
				if ((this._currentSalaryPerHour != value))
				{
					this.OncurrentSalaryPerHourChanging(value);
					this.SendPropertyChanging();
					this._currentSalaryPerHour = value;
					this.SendPropertyChanged("currentSalaryPerHour");
					this.OncurrentSalaryPerHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workingHour", DbType="Float")]
		public System.Nullable<double> workingHour
		{
			get
			{
				return this._workingHour;
			}
			set
			{
				if ((this._workingHour != value))
				{
					this.OnworkingHourChanging(value);
					this.SendPropertyChanging();
					this._workingHour = value;
					this.SendPropertyChanged("workingHour");
					this.OnworkingHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staffStatusCode", DbType="Int NOT NULL")]
		public int staffStatusCode
		{
			get
			{
				return this._staffStatusCode;
			}
			set
			{
				if ((this._staffStatusCode != value))
				{
					if (this._StaffStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstaffStatusCodeChanging(value);
					this.SendPropertyChanging();
					this._staffStatusCode = value;
					this.SendPropertyChanged("staffStatusCode");
					this.OnstaffStatusCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_occupationCode", DbType="Int NOT NULL")]
		public int occupationCode
		{
			get
			{
				return this._occupationCode;
			}
			set
			{
				if ((this._occupationCode != value))
				{
					if (this._Occupation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnoccupationCodeChanging(value);
					this.SendPropertyChanging();
					this._occupationCode = value;
					this.SendPropertyChanged("occupationCode");
					this.OnoccupationCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(1000)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffDetail_WorkingWarehouseManager", Storage="_WorkingWarehouseManagers", ThisKey="staffID", OtherKey="staffID")]
		public EntitySet<WorkingWarehouseManager> WorkingWarehouseManagers
		{
			get
			{
				return this._WorkingWarehouseManagers;
			}
			set
			{
				this._WorkingWarehouseManagers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffDetail_OrderBasicInfo", Storage="_OrderBasicInfos", ThisKey="staffID", OtherKey="cashierID")]
		public EntitySet<OrderBasicInfo> OrderBasicInfos
		{
			get
			{
				return this._OrderBasicInfos;
			}
			set
			{
				this._OrderBasicInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffDetail_StaffAccount", Storage="_StaffAccount", ThisKey="staffID", OtherKey="staffID", IsUnique=true, IsForeignKey=false)]
		public StaffAccount StaffAccount
		{
			get
			{
				return this._StaffAccount.Entity;
			}
			set
			{
				StaffAccount previousValue = this._StaffAccount.Entity;
				if (((previousValue != value) 
							|| (this._StaffAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffAccount.Entity = null;
						previousValue.StaffDetail = null;
					}
					this._StaffAccount.Entity = value;
					if ((value != null))
					{
						value.StaffDetail = this;
					}
					this.SendPropertyChanged("StaffAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffDetail_StockOrder", Storage="_StockOrders", ThisKey="staffID", OtherKey="chargedWarehouseManager")]
		public EntitySet<StockOrder> StockOrders
		{
			get
			{
				return this._StockOrders;
			}
			set
			{
				this._StockOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffDetail_WorkingCashier", Storage="_WorkingCashiers", ThisKey="staffID", OtherKey="staffID")]
		public EntitySet<WorkingCashier> WorkingCashiers
		{
			get
			{
				return this._WorkingCashiers;
			}
			set
			{
				this._WorkingCashiers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffDetail_WorkingManager", Storage="_WorkingManagers", ThisKey="staffID", OtherKey="staffID")]
		public EntitySet<WorkingManager> WorkingManagers
		{
			get
			{
				return this._WorkingManagers;
			}
			set
			{
				this._WorkingManagers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffDetail_WorkingRegularStaff", Storage="_WorkingRegularStaffs", ThisKey="staffID", OtherKey="staffID")]
		public EntitySet<WorkingRegularStaff> WorkingRegularStaffs
		{
			get
			{
				return this._WorkingRegularStaffs;
			}
			set
			{
				this._WorkingRegularStaffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Occupation_StaffDetail", Storage="_Occupation", ThisKey="occupationCode", OtherKey="occupationCode", IsForeignKey=true)]
		public Occupation Occupation
		{
			get
			{
				return this._Occupation.Entity;
			}
			set
			{
				Occupation previousValue = this._Occupation.Entity;
				if (((previousValue != value) 
							|| (this._Occupation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Occupation.Entity = null;
						previousValue.StaffDetails.Remove(this);
					}
					this._Occupation.Entity = value;
					if ((value != null))
					{
						value.StaffDetails.Add(this);
						this._occupationCode = value.occupationCode;
					}
					else
					{
						this._occupationCode = default(int);
					}
					this.SendPropertyChanged("Occupation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonalDetail_StaffDetail", Storage="_PersonalDetail", ThisKey="personalDetailsID", OtherKey="personalDetailsID", IsForeignKey=true)]
		public PersonalDetail PersonalDetail
		{
			get
			{
				return this._PersonalDetail.Entity;
			}
			set
			{
				PersonalDetail previousValue = this._PersonalDetail.Entity;
				if (((previousValue != value) 
							|| (this._PersonalDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonalDetail.Entity = null;
						previousValue.StaffDetails.Remove(this);
					}
					this._PersonalDetail.Entity = value;
					if ((value != null))
					{
						value.StaffDetails.Add(this);
						this._personalDetailsID = value.personalDetailsID;
					}
					else
					{
						this._personalDetailsID = default(int);
					}
					this.SendPropertyChanged("PersonalDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffPosition_StaffDetail", Storage="_StaffPosition", ThisKey="positionCode", OtherKey="positionCode", IsForeignKey=true)]
		public StaffPosition StaffPosition
		{
			get
			{
				return this._StaffPosition.Entity;
			}
			set
			{
				StaffPosition previousValue = this._StaffPosition.Entity;
				if (((previousValue != value) 
							|| (this._StaffPosition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffPosition.Entity = null;
						previousValue.StaffDetails.Remove(this);
					}
					this._StaffPosition.Entity = value;
					if ((value != null))
					{
						value.StaffDetails.Add(this);
						this._positionCode = value.positionCode;
					}
					else
					{
						this._positionCode = default(int);
					}
					this.SendPropertyChanged("StaffPosition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffStatus_StaffDetail", Storage="_StaffStatus", ThisKey="staffStatusCode", OtherKey="staffStatusCode", IsForeignKey=true)]
		public StaffStatus StaffStatus
		{
			get
			{
				return this._StaffStatus.Entity;
			}
			set
			{
				StaffStatus previousValue = this._StaffStatus.Entity;
				if (((previousValue != value) 
							|| (this._StaffStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffStatus.Entity = null;
						previousValue.StaffDetails.Remove(this);
					}
					this._StaffStatus.Entity = value;
					if ((value != null))
					{
						value.StaffDetails.Add(this);
						this._staffStatusCode = value.staffStatusCode;
					}
					else
					{
						this._staffStatusCode = default(int);
					}
					this.SendPropertyChanged("StaffStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkingWarehouseManagers(WorkingWarehouseManager entity)
		{
			this.SendPropertyChanging();
			entity.StaffDetail = this;
		}
		
		private void detach_WorkingWarehouseManagers(WorkingWarehouseManager entity)
		{
			this.SendPropertyChanging();
			entity.StaffDetail = null;
		}
		
		private void attach_OrderBasicInfos(OrderBasicInfo entity)
		{
			this.SendPropertyChanging();
			entity.StaffDetail = this;
		}
		
		private void detach_OrderBasicInfos(OrderBasicInfo entity)
		{
			this.SendPropertyChanging();
			entity.StaffDetail = null;
		}
		
		private void attach_StockOrders(StockOrder entity)
		{
			this.SendPropertyChanging();
			entity.StaffDetail = this;
		}
		
		private void detach_StockOrders(StockOrder entity)
		{
			this.SendPropertyChanging();
			entity.StaffDetail = null;
		}
		
		private void attach_WorkingCashiers(WorkingCashier entity)
		{
			this.SendPropertyChanging();
			entity.StaffDetail = this;
		}
		
		private void detach_WorkingCashiers(WorkingCashier entity)
		{
			this.SendPropertyChanging();
			entity.StaffDetail = null;
		}
		
		private void attach_WorkingManagers(WorkingManager entity)
		{
			this.SendPropertyChanging();
			entity.StaffDetail = this;
		}
		
		private void detach_WorkingManagers(WorkingManager entity)
		{
			this.SendPropertyChanging();
			entity.StaffDetail = null;
		}
		
		private void attach_WorkingRegularStaffs(WorkingRegularStaff entity)
		{
			this.SendPropertyChanging();
			entity.StaffDetail = this;
		}
		
		private void detach_WorkingRegularStaffs(WorkingRegularStaff entity)
		{
			this.SendPropertyChanging();
			entity.StaffDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StaffPosition")]
	public partial class StaffPosition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _positionCode;
		
		private string _name;
		
		private EntitySet<StaffDetail> _StaffDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpositionCodeChanging(int value);
    partial void OnpositionCodeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public StaffPosition()
		{
			this._StaffDetails = new EntitySet<StaffDetail>(new Action<StaffDetail>(this.attach_StaffDetails), new Action<StaffDetail>(this.detach_StaffDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_positionCode", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int positionCode
		{
			get
			{
				return this._positionCode;
			}
			set
			{
				if ((this._positionCode != value))
				{
					this.OnpositionCodeChanging(value);
					this.SendPropertyChanging();
					this._positionCode = value;
					this.SendPropertyChanged("positionCode");
					this.OnpositionCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(150)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffPosition_StaffDetail", Storage="_StaffDetails", ThisKey="positionCode", OtherKey="positionCode")]
		public EntitySet<StaffDetail> StaffDetails
		{
			get
			{
				return this._StaffDetails;
			}
			set
			{
				this._StaffDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StaffDetails(StaffDetail entity)
		{
			this.SendPropertyChanging();
			entity.StaffPosition = this;
		}
		
		private void detach_StaffDetails(StaffDetail entity)
		{
			this.SendPropertyChanging();
			entity.StaffPosition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StaffStatus")]
	public partial class StaffStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _staffStatusCode;
		
		private string _name;
		
		private EntitySet<StaffDetail> _StaffDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstaffStatusCodeChanging(int value);
    partial void OnstaffStatusCodeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public StaffStatus()
		{
			this._StaffDetails = new EntitySet<StaffDetail>(new Action<StaffDetail>(this.attach_StaffDetails), new Action<StaffDetail>(this.detach_StaffDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staffStatusCode", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int staffStatusCode
		{
			get
			{
				return this._staffStatusCode;
			}
			set
			{
				if ((this._staffStatusCode != value))
				{
					this.OnstaffStatusCodeChanging(value);
					this.SendPropertyChanging();
					this._staffStatusCode = value;
					this.SendPropertyChanged("staffStatusCode");
					this.OnstaffStatusCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(150)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffStatus_StaffDetail", Storage="_StaffDetails", ThisKey="staffStatusCode", OtherKey="staffStatusCode")]
		public EntitySet<StaffDetail> StaffDetails
		{
			get
			{
				return this._StaffDetails;
			}
			set
			{
				this._StaffDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StaffDetails(StaffDetail entity)
		{
			this.SendPropertyChanging();
			entity.StaffStatus = this;
		}
		
		private void detach_StaffDetails(StaffDetail entity)
		{
			this.SendPropertyChanging();
			entity.StaffStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StockOrder")]
	public partial class StockOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _stockOrderID;
		
		private System.Nullable<double> _charge;
		
		private string _chargedWarehouseManager;
		
		private System.Nullable<double> _totalPayment;
		
		private System.Nullable<System.DateTime> _dateCreated;
		
		private EntitySet<StockOrderDetail> _StockOrderDetails;
		
		private EntityRef<StaffDetail> _StaffDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstockOrderIDChanging(string value);
    partial void OnstockOrderIDChanged();
    partial void OnchargeChanging(System.Nullable<double> value);
    partial void OnchargeChanged();
    partial void OnchargedWarehouseManagerChanging(string value);
    partial void OnchargedWarehouseManagerChanged();
    partial void OntotalPaymentChanging(System.Nullable<double> value);
    partial void OntotalPaymentChanged();
    partial void OndateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OndateCreatedChanged();
    #endregion
		
		public StockOrder()
		{
			this._StockOrderDetails = new EntitySet<StockOrderDetail>(new Action<StockOrderDetail>(this.attach_StockOrderDetails), new Action<StockOrderDetail>(this.detach_StockOrderDetails));
			this._StaffDetail = default(EntityRef<StaffDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stockOrderID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string stockOrderID
		{
			get
			{
				return this._stockOrderID;
			}
			set
			{
				if ((this._stockOrderID != value))
				{
					this.OnstockOrderIDChanging(value);
					this.SendPropertyChanging();
					this._stockOrderID = value;
					this.SendPropertyChanged("stockOrderID");
					this.OnstockOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_charge", DbType="Float")]
		public System.Nullable<double> charge
		{
			get
			{
				return this._charge;
			}
			set
			{
				if ((this._charge != value))
				{
					this.OnchargeChanging(value);
					this.SendPropertyChanging();
					this._charge = value;
					this.SendPropertyChanged("charge");
					this.OnchargeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_chargedWarehouseManager", DbType="NVarChar(100)")]
		public string chargedWarehouseManager
		{
			get
			{
				return this._chargedWarehouseManager;
			}
			set
			{
				if ((this._chargedWarehouseManager != value))
				{
					if (this._StaffDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnchargedWarehouseManagerChanging(value);
					this.SendPropertyChanging();
					this._chargedWarehouseManager = value;
					this.SendPropertyChanged("chargedWarehouseManager");
					this.OnchargedWarehouseManagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_totalPayment", DbType="Float")]
		public System.Nullable<double> totalPayment
		{
			get
			{
				return this._totalPayment;
			}
			set
			{
				if ((this._totalPayment != value))
				{
					this.OntotalPaymentChanging(value);
					this.SendPropertyChanging();
					this._totalPayment = value;
					this.SendPropertyChanged("totalPayment");
					this.OntotalPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateCreated", DbType="Date")]
		public System.Nullable<System.DateTime> dateCreated
		{
			get
			{
				return this._dateCreated;
			}
			set
			{
				if ((this._dateCreated != value))
				{
					this.OndateCreatedChanging(value);
					this.SendPropertyChanging();
					this._dateCreated = value;
					this.SendPropertyChanged("dateCreated");
					this.OndateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StockOrder_StockOrderDetail", Storage="_StockOrderDetails", ThisKey="stockOrderID", OtherKey="stockOrderID")]
		public EntitySet<StockOrderDetail> StockOrderDetails
		{
			get
			{
				return this._StockOrderDetails;
			}
			set
			{
				this._StockOrderDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffDetail_StockOrder", Storage="_StaffDetail", ThisKey="chargedWarehouseManager", OtherKey="staffID", IsForeignKey=true)]
		public StaffDetail StaffDetail
		{
			get
			{
				return this._StaffDetail.Entity;
			}
			set
			{
				StaffDetail previousValue = this._StaffDetail.Entity;
				if (((previousValue != value) 
							|| (this._StaffDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffDetail.Entity = null;
						previousValue.StockOrders.Remove(this);
					}
					this._StaffDetail.Entity = value;
					if ((value != null))
					{
						value.StockOrders.Add(this);
						this._chargedWarehouseManager = value.staffID;
					}
					else
					{
						this._chargedWarehouseManager = default(string);
					}
					this.SendPropertyChanged("StaffDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StockOrderDetails(StockOrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.StockOrder = this;
		}
		
		private void detach_StockOrderDetails(StockOrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.StockOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StockOrderDetails")]
	public partial class StockOrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _stockOrderID;
		
		private int _stockItemDetailsID;
		
		private System.Nullable<int> _quantity;
		
		private EntityRef<IngredientInStockDetail> _IngredientInStockDetail;
		
		private EntityRef<StockOrder> _StockOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstockOrderIDChanging(string value);
    partial void OnstockOrderIDChanged();
    partial void OnstockItemDetailsIDChanging(int value);
    partial void OnstockItemDetailsIDChanged();
    partial void OnquantityChanging(System.Nullable<int> value);
    partial void OnquantityChanged();
    #endregion
		
		public StockOrderDetail()
		{
			this._IngredientInStockDetail = default(EntityRef<IngredientInStockDetail>);
			this._StockOrder = default(EntityRef<StockOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stockOrderID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string stockOrderID
		{
			get
			{
				return this._stockOrderID;
			}
			set
			{
				if ((this._stockOrderID != value))
				{
					if (this._StockOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstockOrderIDChanging(value);
					this.SendPropertyChanging();
					this._stockOrderID = value;
					this.SendPropertyChanged("stockOrderID");
					this.OnstockOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stockItemDetailsID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int stockItemDetailsID
		{
			get
			{
				return this._stockItemDetailsID;
			}
			set
			{
				if ((this._stockItemDetailsID != value))
				{
					if (this._IngredientInStockDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstockItemDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._stockItemDetailsID = value;
					this.SendPropertyChanged("stockItemDetailsID");
					this.OnstockItemDetailsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int")]
		public System.Nullable<int> quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IngredientInStockDetail_StockOrderDetail", Storage="_IngredientInStockDetail", ThisKey="stockItemDetailsID", OtherKey="ingredientDetailsID", IsForeignKey=true)]
		public IngredientInStockDetail IngredientInStockDetail
		{
			get
			{
				return this._IngredientInStockDetail.Entity;
			}
			set
			{
				IngredientInStockDetail previousValue = this._IngredientInStockDetail.Entity;
				if (((previousValue != value) 
							|| (this._IngredientInStockDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IngredientInStockDetail.Entity = null;
						previousValue.StockOrderDetails.Remove(this);
					}
					this._IngredientInStockDetail.Entity = value;
					if ((value != null))
					{
						value.StockOrderDetails.Add(this);
						this._stockItemDetailsID = value.ingredientDetailsID;
					}
					else
					{
						this._stockItemDetailsID = default(int);
					}
					this.SendPropertyChanged("IngredientInStockDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StockOrder_StockOrderDetail", Storage="_StockOrder", ThisKey="stockOrderID", OtherKey="stockOrderID", IsForeignKey=true)]
		public StockOrder StockOrder
		{
			get
			{
				return this._StockOrder.Entity;
			}
			set
			{
				StockOrder previousValue = this._StockOrder.Entity;
				if (((previousValue != value) 
							|| (this._StockOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StockOrder.Entity = null;
						previousValue.StockOrderDetails.Remove(this);
					}
					this._StockOrder.Entity = value;
					if ((value != null))
					{
						value.StockOrderDetails.Add(this);
						this._stockOrderID = value.stockOrderID;
					}
					else
					{
						this._stockOrderID = default(string);
					}
					this.SendPropertyChanged("StockOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VIP")]
	public partial class VIP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _vipID;
		
		private int _personalDetailsID;
		
		private int _occupationCode;
		
		private System.Nullable<System.DateTime> _registerDate;
		
		private System.Nullable<System.DateTime> _endDate;
		
		private int _vipStatusCode;
		
		private EntitySet<VIPOrder> _VIPOrders;
		
		private EntityRef<Occupation> _Occupation;
		
		private EntityRef<PersonalDetail> _PersonalDetail;
		
		private EntityRef<VIPStatus> _VIPStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvipIDChanging(string value);
    partial void OnvipIDChanged();
    partial void OnpersonalDetailsIDChanging(int value);
    partial void OnpersonalDetailsIDChanged();
    partial void OnoccupationCodeChanging(int value);
    partial void OnoccupationCodeChanged();
    partial void OnregisterDateChanging(System.Nullable<System.DateTime> value);
    partial void OnregisterDateChanged();
    partial void OnendDateChanging(System.Nullable<System.DateTime> value);
    partial void OnendDateChanged();
    partial void OnvipStatusCodeChanging(int value);
    partial void OnvipStatusCodeChanged();
    #endregion
		
		public VIP()
		{
			this._VIPOrders = new EntitySet<VIPOrder>(new Action<VIPOrder>(this.attach_VIPOrders), new Action<VIPOrder>(this.detach_VIPOrders));
			this._Occupation = default(EntityRef<Occupation>);
			this._PersonalDetail = default(EntityRef<PersonalDetail>);
			this._VIPStatus = default(EntityRef<VIPStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vipID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string vipID
		{
			get
			{
				return this._vipID;
			}
			set
			{
				if ((this._vipID != value))
				{
					this.OnvipIDChanging(value);
					this.SendPropertyChanging();
					this._vipID = value;
					this.SendPropertyChanged("vipID");
					this.OnvipIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_personalDetailsID", DbType="Int NOT NULL")]
		public int personalDetailsID
		{
			get
			{
				return this._personalDetailsID;
			}
			set
			{
				if ((this._personalDetailsID != value))
				{
					if (this._PersonalDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpersonalDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._personalDetailsID = value;
					this.SendPropertyChanged("personalDetailsID");
					this.OnpersonalDetailsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_occupationCode", DbType="Int NOT NULL")]
		public int occupationCode
		{
			get
			{
				return this._occupationCode;
			}
			set
			{
				if ((this._occupationCode != value))
				{
					if (this._Occupation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnoccupationCodeChanging(value);
					this.SendPropertyChanging();
					this._occupationCode = value;
					this.SendPropertyChanged("occupationCode");
					this.OnoccupationCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="Date")]
		public System.Nullable<System.DateTime> registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="Date")]
		public System.Nullable<System.DateTime> endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vipStatusCode", DbType="Int NOT NULL")]
		public int vipStatusCode
		{
			get
			{
				return this._vipStatusCode;
			}
			set
			{
				if ((this._vipStatusCode != value))
				{
					if (this._VIPStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvipStatusCodeChanging(value);
					this.SendPropertyChanging();
					this._vipStatusCode = value;
					this.SendPropertyChanged("vipStatusCode");
					this.OnvipStatusCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VIP_VIPOrder", Storage="_VIPOrders", ThisKey="vipID", OtherKey="vipID")]
		public EntitySet<VIPOrder> VIPOrders
		{
			get
			{
				return this._VIPOrders;
			}
			set
			{
				this._VIPOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Occupation_VIP", Storage="_Occupation", ThisKey="occupationCode", OtherKey="occupationCode", IsForeignKey=true)]
		public Occupation Occupation
		{
			get
			{
				return this._Occupation.Entity;
			}
			set
			{
				Occupation previousValue = this._Occupation.Entity;
				if (((previousValue != value) 
							|| (this._Occupation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Occupation.Entity = null;
						previousValue.VIPs.Remove(this);
					}
					this._Occupation.Entity = value;
					if ((value != null))
					{
						value.VIPs.Add(this);
						this._occupationCode = value.occupationCode;
					}
					else
					{
						this._occupationCode = default(int);
					}
					this.SendPropertyChanged("Occupation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonalDetail_VIP", Storage="_PersonalDetail", ThisKey="personalDetailsID", OtherKey="personalDetailsID", IsForeignKey=true)]
		public PersonalDetail PersonalDetail
		{
			get
			{
				return this._PersonalDetail.Entity;
			}
			set
			{
				PersonalDetail previousValue = this._PersonalDetail.Entity;
				if (((previousValue != value) 
							|| (this._PersonalDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonalDetail.Entity = null;
						previousValue.VIPs.Remove(this);
					}
					this._PersonalDetail.Entity = value;
					if ((value != null))
					{
						value.VIPs.Add(this);
						this._personalDetailsID = value.personalDetailsID;
					}
					else
					{
						this._personalDetailsID = default(int);
					}
					this.SendPropertyChanged("PersonalDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VIPStatus_VIP", Storage="_VIPStatus", ThisKey="vipStatusCode", OtherKey="vipStatusCode", IsForeignKey=true)]
		public VIPStatus VIPStatus
		{
			get
			{
				return this._VIPStatus.Entity;
			}
			set
			{
				VIPStatus previousValue = this._VIPStatus.Entity;
				if (((previousValue != value) 
							|| (this._VIPStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VIPStatus.Entity = null;
						previousValue.VIPs.Remove(this);
					}
					this._VIPStatus.Entity = value;
					if ((value != null))
					{
						value.VIPs.Add(this);
						this._vipStatusCode = value.vipStatusCode;
					}
					else
					{
						this._vipStatusCode = default(int);
					}
					this.SendPropertyChanged("VIPStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VIPOrders(VIPOrder entity)
		{
			this.SendPropertyChanging();
			entity.VIP = this;
		}
		
		private void detach_VIPOrders(VIPOrder entity)
		{
			this.SendPropertyChanging();
			entity.VIP = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VIPOrder")]
	public partial class VIPOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _vipID;
		
		private string _orderID;
		
		private EntityRef<VIP> _VIP;
		
		private EntityRef<OrderBasicInfo> _OrderBasicInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvipIDChanging(string value);
    partial void OnvipIDChanged();
    partial void OnorderIDChanging(string value);
    partial void OnorderIDChanged();
    #endregion
		
		public VIPOrder()
		{
			this._VIP = default(EntityRef<VIP>);
			this._OrderBasicInfo = default(EntityRef<OrderBasicInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vipID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string vipID
		{
			get
			{
				return this._vipID;
			}
			set
			{
				if ((this._vipID != value))
				{
					if (this._VIP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvipIDChanging(value);
					this.SendPropertyChanging();
					this._vipID = value;
					this.SendPropertyChanged("vipID");
					this.OnvipIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string orderID
		{
			get
			{
				return this._orderID;
			}
			set
			{
				if ((this._orderID != value))
				{
					if (this._OrderBasicInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnorderIDChanging(value);
					this.SendPropertyChanging();
					this._orderID = value;
					this.SendPropertyChanged("orderID");
					this.OnorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VIP_VIPOrder", Storage="_VIP", ThisKey="vipID", OtherKey="vipID", IsForeignKey=true)]
		public VIP VIP
		{
			get
			{
				return this._VIP.Entity;
			}
			set
			{
				VIP previousValue = this._VIP.Entity;
				if (((previousValue != value) 
							|| (this._VIP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VIP.Entity = null;
						previousValue.VIPOrders.Remove(this);
					}
					this._VIP.Entity = value;
					if ((value != null))
					{
						value.VIPOrders.Add(this);
						this._vipID = value.vipID;
					}
					else
					{
						this._vipID = default(string);
					}
					this.SendPropertyChanged("VIP");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderBasicInfo_VIPOrder", Storage="_OrderBasicInfo", ThisKey="orderID", OtherKey="orderID", IsForeignKey=true)]
		public OrderBasicInfo OrderBasicInfo
		{
			get
			{
				return this._OrderBasicInfo.Entity;
			}
			set
			{
				OrderBasicInfo previousValue = this._OrderBasicInfo.Entity;
				if (((previousValue != value) 
							|| (this._OrderBasicInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderBasicInfo.Entity = null;
						previousValue.VIPOrders.Remove(this);
					}
					this._OrderBasicInfo.Entity = value;
					if ((value != null))
					{
						value.VIPOrders.Add(this);
						this._orderID = value.orderID;
					}
					else
					{
						this._orderID = default(string);
					}
					this.SendPropertyChanged("OrderBasicInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VIPStatus")]
	public partial class VIPStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _vipStatusCode;
		
		private string _name;
		
		private EntitySet<VIP> _VIPs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvipStatusCodeChanging(int value);
    partial void OnvipStatusCodeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public VIPStatus()
		{
			this._VIPs = new EntitySet<VIP>(new Action<VIP>(this.attach_VIPs), new Action<VIP>(this.detach_VIPs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vipStatusCode", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int vipStatusCode
		{
			get
			{
				return this._vipStatusCode;
			}
			set
			{
				if ((this._vipStatusCode != value))
				{
					this.OnvipStatusCodeChanging(value);
					this.SendPropertyChanging();
					this._vipStatusCode = value;
					this.SendPropertyChanged("vipStatusCode");
					this.OnvipStatusCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(150)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VIPStatus_VIP", Storage="_VIPs", ThisKey="vipStatusCode", OtherKey="vipStatusCode")]
		public EntitySet<VIP> VIPs
		{
			get
			{
				return this._VIPs;
			}
			set
			{
				this._VIPs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VIPs(VIP entity)
		{
			this.SendPropertyChanging();
			entity.VIPStatus = this;
		}
		
		private void detach_VIPs(VIP entity)
		{
			this.SendPropertyChanging();
			entity.VIPStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Voucher")]
	public partial class Voucher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _voucherID;
		
		private System.Nullable<System.DateTime> _expireDate;
		
		private System.Nullable<System.DateTime> _publishDate;
		
		private string _discountID;
		
		private EntitySet<FoodOrder> _FoodOrders;
		
		private EntityRef<Discount> _Discount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvoucherIDChanging(string value);
    partial void OnvoucherIDChanged();
    partial void OnexpireDateChanging(System.Nullable<System.DateTime> value);
    partial void OnexpireDateChanged();
    partial void OnpublishDateChanging(System.Nullable<System.DateTime> value);
    partial void OnpublishDateChanged();
    partial void OndiscountIDChanging(string value);
    partial void OndiscountIDChanged();
    #endregion
		
		public Voucher()
		{
			this._FoodOrders = new EntitySet<FoodOrder>(new Action<FoodOrder>(this.attach_FoodOrders), new Action<FoodOrder>(this.detach_FoodOrders));
			this._Discount = default(EntityRef<Discount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_voucherID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string voucherID
		{
			get
			{
				return this._voucherID;
			}
			set
			{
				if ((this._voucherID != value))
				{
					this.OnvoucherIDChanging(value);
					this.SendPropertyChanging();
					this._voucherID = value;
					this.SendPropertyChanged("voucherID");
					this.OnvoucherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_expireDate", DbType="Date")]
		public System.Nullable<System.DateTime> expireDate
		{
			get
			{
				return this._expireDate;
			}
			set
			{
				if ((this._expireDate != value))
				{
					this.OnexpireDateChanging(value);
					this.SendPropertyChanging();
					this._expireDate = value;
					this.SendPropertyChanged("expireDate");
					this.OnexpireDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publishDate", DbType="Date")]
		public System.Nullable<System.DateTime> publishDate
		{
			get
			{
				return this._publishDate;
			}
			set
			{
				if ((this._publishDate != value))
				{
					this.OnpublishDateChanging(value);
					this.SendPropertyChanging();
					this._publishDate = value;
					this.SendPropertyChanged("publishDate");
					this.OnpublishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_discountID", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string discountID
		{
			get
			{
				return this._discountID;
			}
			set
			{
				if ((this._discountID != value))
				{
					if (this._Discount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndiscountIDChanging(value);
					this.SendPropertyChanging();
					this._discountID = value;
					this.SendPropertyChanged("discountID");
					this.OndiscountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Voucher_FoodOrder", Storage="_FoodOrders", ThisKey="voucherID", OtherKey="voucherID")]
		public EntitySet<FoodOrder> FoodOrders
		{
			get
			{
				return this._FoodOrders;
			}
			set
			{
				this._FoodOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discount_Voucher", Storage="_Discount", ThisKey="discountID", OtherKey="discountID", IsForeignKey=true)]
		public Discount Discount
		{
			get
			{
				return this._Discount.Entity;
			}
			set
			{
				Discount previousValue = this._Discount.Entity;
				if (((previousValue != value) 
							|| (this._Discount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Discount.Entity = null;
						previousValue.Vouchers.Remove(this);
					}
					this._Discount.Entity = value;
					if ((value != null))
					{
						value.Vouchers.Add(this);
						this._discountID = value.discountID;
					}
					else
					{
						this._discountID = default(string);
					}
					this.SendPropertyChanged("Discount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FoodOrders(FoodOrder entity)
		{
			this.SendPropertyChanging();
			entity.Voucher = this;
		}
		
		private void detach_FoodOrders(FoodOrder entity)
		{
			this.SendPropertyChanging();
			entity.Voucher = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkingCashier")]
	public partial class WorkingCashier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _staffID;
		
		private int _scheduleID;
		
		private EntityRef<Schedule> _Schedule;
		
		private EntityRef<StaffDetail> _StaffDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstaffIDChanging(string value);
    partial void OnstaffIDChanged();
    partial void OnscheduleIDChanging(int value);
    partial void OnscheduleIDChanged();
    #endregion
		
		public WorkingCashier()
		{
			this._Schedule = default(EntityRef<Schedule>);
			this._StaffDetail = default(EntityRef<StaffDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staffID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string staffID
		{
			get
			{
				return this._staffID;
			}
			set
			{
				if ((this._staffID != value))
				{
					if (this._StaffDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstaffIDChanging(value);
					this.SendPropertyChanging();
					this._staffID = value;
					this.SendPropertyChanged("staffID");
					this.OnstaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scheduleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int scheduleID
		{
			get
			{
				return this._scheduleID;
			}
			set
			{
				if ((this._scheduleID != value))
				{
					if (this._Schedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnscheduleIDChanging(value);
					this.SendPropertyChanging();
					this._scheduleID = value;
					this.SendPropertyChanged("scheduleID");
					this.OnscheduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_WorkingCashier", Storage="_Schedule", ThisKey="scheduleID", OtherKey="scheduleID", IsForeignKey=true)]
		public Schedule Schedule
		{
			get
			{
				return this._Schedule.Entity;
			}
			set
			{
				Schedule previousValue = this._Schedule.Entity;
				if (((previousValue != value) 
							|| (this._Schedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schedule.Entity = null;
						previousValue.WorkingCashiers.Remove(this);
					}
					this._Schedule.Entity = value;
					if ((value != null))
					{
						value.WorkingCashiers.Add(this);
						this._scheduleID = value.scheduleID;
					}
					else
					{
						this._scheduleID = default(int);
					}
					this.SendPropertyChanged("Schedule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffDetail_WorkingCashier", Storage="_StaffDetail", ThisKey="staffID", OtherKey="staffID", IsForeignKey=true)]
		public StaffDetail StaffDetail
		{
			get
			{
				return this._StaffDetail.Entity;
			}
			set
			{
				StaffDetail previousValue = this._StaffDetail.Entity;
				if (((previousValue != value) 
							|| (this._StaffDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffDetail.Entity = null;
						previousValue.WorkingCashiers.Remove(this);
					}
					this._StaffDetail.Entity = value;
					if ((value != null))
					{
						value.WorkingCashiers.Add(this);
						this._staffID = value.staffID;
					}
					else
					{
						this._staffID = default(string);
					}
					this.SendPropertyChanged("StaffDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkingManager")]
	public partial class WorkingManager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _staffID;
		
		private int _scheduleID;
		
		private EntityRef<Schedule> _Schedule;
		
		private EntityRef<StaffDetail> _StaffDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstaffIDChanging(string value);
    partial void OnstaffIDChanged();
    partial void OnscheduleIDChanging(int value);
    partial void OnscheduleIDChanged();
    #endregion
		
		public WorkingManager()
		{
			this._Schedule = default(EntityRef<Schedule>);
			this._StaffDetail = default(EntityRef<StaffDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staffID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string staffID
		{
			get
			{
				return this._staffID;
			}
			set
			{
				if ((this._staffID != value))
				{
					if (this._StaffDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstaffIDChanging(value);
					this.SendPropertyChanging();
					this._staffID = value;
					this.SendPropertyChanged("staffID");
					this.OnstaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scheduleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int scheduleID
		{
			get
			{
				return this._scheduleID;
			}
			set
			{
				if ((this._scheduleID != value))
				{
					if (this._Schedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnscheduleIDChanging(value);
					this.SendPropertyChanging();
					this._scheduleID = value;
					this.SendPropertyChanged("scheduleID");
					this.OnscheduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_WorkingManager", Storage="_Schedule", ThisKey="scheduleID", OtherKey="scheduleID", IsForeignKey=true)]
		public Schedule Schedule
		{
			get
			{
				return this._Schedule.Entity;
			}
			set
			{
				Schedule previousValue = this._Schedule.Entity;
				if (((previousValue != value) 
							|| (this._Schedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schedule.Entity = null;
						previousValue.WorkingManagers.Remove(this);
					}
					this._Schedule.Entity = value;
					if ((value != null))
					{
						value.WorkingManagers.Add(this);
						this._scheduleID = value.scheduleID;
					}
					else
					{
						this._scheduleID = default(int);
					}
					this.SendPropertyChanged("Schedule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffDetail_WorkingManager", Storage="_StaffDetail", ThisKey="staffID", OtherKey="staffID", IsForeignKey=true)]
		public StaffDetail StaffDetail
		{
			get
			{
				return this._StaffDetail.Entity;
			}
			set
			{
				StaffDetail previousValue = this._StaffDetail.Entity;
				if (((previousValue != value) 
							|| (this._StaffDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffDetail.Entity = null;
						previousValue.WorkingManagers.Remove(this);
					}
					this._StaffDetail.Entity = value;
					if ((value != null))
					{
						value.WorkingManagers.Add(this);
						this._staffID = value.staffID;
					}
					else
					{
						this._staffID = default(string);
					}
					this.SendPropertyChanged("StaffDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkingRegularStaff")]
	public partial class WorkingRegularStaff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _staffID;
		
		private int _scheduleID;
		
		private EntityRef<Schedule> _Schedule;
		
		private EntityRef<StaffDetail> _StaffDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstaffIDChanging(string value);
    partial void OnstaffIDChanged();
    partial void OnscheduleIDChanging(int value);
    partial void OnscheduleIDChanged();
    #endregion
		
		public WorkingRegularStaff()
		{
			this._Schedule = default(EntityRef<Schedule>);
			this._StaffDetail = default(EntityRef<StaffDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staffID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string staffID
		{
			get
			{
				return this._staffID;
			}
			set
			{
				if ((this._staffID != value))
				{
					if (this._StaffDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstaffIDChanging(value);
					this.SendPropertyChanging();
					this._staffID = value;
					this.SendPropertyChanged("staffID");
					this.OnstaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scheduleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int scheduleID
		{
			get
			{
				return this._scheduleID;
			}
			set
			{
				if ((this._scheduleID != value))
				{
					if (this._Schedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnscheduleIDChanging(value);
					this.SendPropertyChanging();
					this._scheduleID = value;
					this.SendPropertyChanged("scheduleID");
					this.OnscheduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_WorkingRegularStaff", Storage="_Schedule", ThisKey="scheduleID", OtherKey="scheduleID", IsForeignKey=true)]
		public Schedule Schedule
		{
			get
			{
				return this._Schedule.Entity;
			}
			set
			{
				Schedule previousValue = this._Schedule.Entity;
				if (((previousValue != value) 
							|| (this._Schedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schedule.Entity = null;
						previousValue.WorkingRegularStaffs.Remove(this);
					}
					this._Schedule.Entity = value;
					if ((value != null))
					{
						value.WorkingRegularStaffs.Add(this);
						this._scheduleID = value.scheduleID;
					}
					else
					{
						this._scheduleID = default(int);
					}
					this.SendPropertyChanged("Schedule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffDetail_WorkingRegularStaff", Storage="_StaffDetail", ThisKey="staffID", OtherKey="staffID", IsForeignKey=true)]
		public StaffDetail StaffDetail
		{
			get
			{
				return this._StaffDetail.Entity;
			}
			set
			{
				StaffDetail previousValue = this._StaffDetail.Entity;
				if (((previousValue != value) 
							|| (this._StaffDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffDetail.Entity = null;
						previousValue.WorkingRegularStaffs.Remove(this);
					}
					this._StaffDetail.Entity = value;
					if ((value != null))
					{
						value.WorkingRegularStaffs.Add(this);
						this._staffID = value.staffID;
					}
					else
					{
						this._staffID = default(string);
					}
					this.SendPropertyChanged("StaffDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkingShiftInfo")]
	public partial class WorkingShiftInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _workingShiftID;
		
		private string _workingShift;
		
		private System.Nullable<System.TimeSpan> _startTime;
		
		private System.Nullable<System.TimeSpan> _endTime;
		
		private System.Nullable<System.DateTime> _effectiveDate;
		
		private System.Nullable<System.DateTime> _dueDate;
		
		private EntitySet<Schedule> _Schedules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnworkingShiftIDChanging(int value);
    partial void OnworkingShiftIDChanged();
    partial void OnworkingShiftChanging(string value);
    partial void OnworkingShiftChanged();
    partial void OnstartTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnstartTimeChanged();
    partial void OnendTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnendTimeChanged();
    partial void OneffectiveDateChanging(System.Nullable<System.DateTime> value);
    partial void OneffectiveDateChanged();
    partial void OndueDateChanging(System.Nullable<System.DateTime> value);
    partial void OndueDateChanged();
    #endregion
		
		public WorkingShiftInfo()
		{
			this._Schedules = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedules), new Action<Schedule>(this.detach_Schedules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workingShiftID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int workingShiftID
		{
			get
			{
				return this._workingShiftID;
			}
			set
			{
				if ((this._workingShiftID != value))
				{
					this.OnworkingShiftIDChanging(value);
					this.SendPropertyChanging();
					this._workingShiftID = value;
					this.SendPropertyChanged("workingShiftID");
					this.OnworkingShiftIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workingShift", DbType="NVarChar(100)")]
		public string workingShift
		{
			get
			{
				return this._workingShift;
			}
			set
			{
				if ((this._workingShift != value))
				{
					this.OnworkingShiftChanging(value);
					this.SendPropertyChanging();
					this._workingShift = value;
					this.SendPropertyChanged("workingShift");
					this.OnworkingShiftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> startTime
		{
			get
			{
				return this._startTime;
			}
			set
			{
				if ((this._startTime != value))
				{
					this.OnstartTimeChanging(value);
					this.SendPropertyChanging();
					this._startTime = value;
					this.SendPropertyChanged("startTime");
					this.OnstartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> endTime
		{
			get
			{
				return this._endTime;
			}
			set
			{
				if ((this._endTime != value))
				{
					this.OnendTimeChanging(value);
					this.SendPropertyChanging();
					this._endTime = value;
					this.SendPropertyChanged("endTime");
					this.OnendTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_effectiveDate", DbType="Date")]
		public System.Nullable<System.DateTime> effectiveDate
		{
			get
			{
				return this._effectiveDate;
			}
			set
			{
				if ((this._effectiveDate != value))
				{
					this.OneffectiveDateChanging(value);
					this.SendPropertyChanging();
					this._effectiveDate = value;
					this.SendPropertyChanged("effectiveDate");
					this.OneffectiveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dueDate", DbType="Date")]
		public System.Nullable<System.DateTime> dueDate
		{
			get
			{
				return this._dueDate;
			}
			set
			{
				if ((this._dueDate != value))
				{
					this.OndueDateChanging(value);
					this.SendPropertyChanging();
					this._dueDate = value;
					this.SendPropertyChanged("dueDate");
					this.OndueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkingShiftInfo_Schedule", Storage="_Schedules", ThisKey="workingShiftID", OtherKey="workingShiftID")]
		public EntitySet<Schedule> Schedules
		{
			get
			{
				return this._Schedules;
			}
			set
			{
				this._Schedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.WorkingShiftInfo = this;
		}
		
		private void detach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.WorkingShiftInfo = null;
		}
	}
}
#pragma warning restore 1591
